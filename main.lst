                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.5.0 #9253 (Apr  3 2018) (Linux)
                                      4 ; This file was generated Mon May 23 21:01:18 2022
                                      5 ;--------------------------------------------------------
                                      6 	.module main
                                      7 	.optsdcc -mstm8
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; Public variables in this module
                                     11 ;--------------------------------------------------------
                                     12 	.globl _font_arr
                                     13 	.globl _main
                                     14 	.globl _dtri
                                     15 	.globl _dsine
                                     16 	.globl _readreg
                                     17 	.globl _delay_init
                                     18 	.globl _delay_us
                                     19 	.globl _delay_ms
                                     20 	.globl _delay_timer
                                     21 	.globl _clock_init
                                     22 	.globl _i2c_init
                                     23 	.globl _i2c_set_start
                                     24 	.globl _i2c_set_address
                                     25 	.globl _i2c_set_stop
                                     26 	.globl _i2c_clear_ack
                                     27 	.globl _i2c_set_ack
                                     28 	.globl _i2c_ack_pos_current
                                     29 	.globl _i2c_ack_pos_next
                                     30 	.globl _i2c_poll_SB
                                     31 	.globl _i2c_poll_ADDR
                                     32 	.globl _i2c_poll_BTF
                                     33 	.globl _i2c_poll_TXE
                                     34 	.globl _i2c_poll_RXNE
                                     35 	.globl _i2c_clear_bits
                                     36 	.globl _i2c_clear_ADDR
                                     37 	.globl _i2c_enable_interrupts
                                     38 	.globl _i2c_disable_interrupts
                                     39 	.globl _i2c_write_1byte
                                     40 	.globl _i2c_write_2byte
                                     41 	.globl _adc_init
                                     42 	.globl _read_adc
                                     43 	.globl _uart1_init
                                     44 	.globl _uart1_send
                                     45 	.globl _uart1_recv
                                     46 	.globl _uart1_recv_i
                                     47 	.globl _ssd1306_init
                                     48 	.globl _ssd1306_sendcom
                                     49 	.globl _ssd1306_senddat
                                     50 	.globl _ssd1306_setpos
                                     51 	.globl _ssd1306_clear
                                     52 	.globl _OLED_setpos
                                     53 	.globl _OLED_drawbyte
                                     54 	.globl _OLED_drawchar
                                     55 	.globl _OLED_drawtext
                                     56 	.globl _OLED_drawint
                                     57 	.globl _OLED_clear
                                     58 	.globl _OLED_clearblock
                                     59 	.globl _OLED_normal
                                     60 	.globl _OLED_reverse
                                     61 	.globl _loop
                                     62 	.globl _gpio_init
                                     63 	.globl _drawInt
                                     64 	.globl _drawAlphanum
                                     65 	.globl _drawPunct
                                     66 	.globl _drawFrame
                                     67 	.globl _drawArrow
                                     68 	.globl _drawBytes
                                     69 	.globl _drawLoadingBar
                                     70 ;--------------------------------------------------------
                                     71 ; ram data
                                     72 ;--------------------------------------------------------
                                     73 	.area DATA
      000000                         74 _readreg::
      000000                         75 	.ds 1
                                     76 ;--------------------------------------------------------
                                     77 ; ram data
                                     78 ;--------------------------------------------------------
                                     79 	.area INITIALIZED
      000000                         80 _dsine::
      000000                         81 	.ds 10
      00000A                         82 _dtri::
      00000A                         83 	.ds 14
                                     84 ;--------------------------------------------------------
                                     85 ; Stack segment in internal ram 
                                     86 ;--------------------------------------------------------
                                     87 	.area	SSEG
      000000                         88 __start__stack:
      000000                         89 	.ds	1
                                     90 
                                     91 ;--------------------------------------------------------
                                     92 ; absolute external ram data
                                     93 ;--------------------------------------------------------
                                     94 	.area DABS (ABS)
                                     95 ;--------------------------------------------------------
                                     96 ; interrupt vector 
                                     97 ;--------------------------------------------------------
                                     98 	.area HOME
      000000                         99 __interrupt_vect:
      000000 82v00u00u00            100 	int s_GSINIT ;reset
      000004 82 00 00 00            101 	int 0x0000 ;trap
      000008 82 00 00 00            102 	int 0x0000 ;int0
      00000C 82 00 00 00            103 	int 0x0000 ;int1
      000010 82 00 00 00            104 	int 0x0000 ;int2
      000014 82 00 00 00            105 	int 0x0000 ;int3
      000018 82 00 00 00            106 	int 0x0000 ;int4
      00001C 82 00 00 00            107 	int 0x0000 ;int5
      000020 82 00 00 00            108 	int 0x0000 ;int6
      000024 82 00 00 00            109 	int 0x0000 ;int7
      000028 82 00 00 00            110 	int 0x0000 ;int8
      00002C 82 00 00 00            111 	int 0x0000 ;int9
      000030 82 00 00 00            112 	int 0x0000 ;int10
      000034 82 00 00 00            113 	int 0x0000 ;int11
      000038 82 00 00 00            114 	int 0x0000 ;int12
      00003C 82 00 00 00            115 	int 0x0000 ;int13
      000040 82 00 00 00            116 	int 0x0000 ;int14
      000044 82 00 00 00            117 	int 0x0000 ;int15
      000048 82 00 00 00            118 	int 0x0000 ;int16
      00004C 82 00 00 00            119 	int 0x0000 ;int17
      000050 82 00 00 00            120 	int 0x0000 ;int18
      000054 82 00 00 00            121 	int 0x0000 ;int19
      000058 82 00 00 00            122 	int 0x0000 ;int20
      00005C 82 00 00 00            123 	int 0x0000 ;int21
      000060 82 00 00 00            124 	int 0x0000 ;int22
      000064 82 00 00 00            125 	int 0x0000 ;int23
      000068 82 00 00 00            126 	int 0x0000 ;int24
      00006C 82 00 00 00            127 	int 0x0000 ;int25
      000070 82 00 00 00            128 	int 0x0000 ;int26
      000074 82 00 00 00            129 	int 0x0000 ;int27
      000078 82 00 00 00            130 	int 0x0000 ;int28
      00007C 82 00 00 00            131 	int 0x0000 ;int29
                                    132 ;--------------------------------------------------------
                                    133 ; global & static initialisations
                                    134 ;--------------------------------------------------------
                                    135 	.area HOME
                                    136 	.area GSINIT
                                    137 	.area GSFINAL
                                    138 	.area GSINIT
      000000                        139 __sdcc_gs_init_startup:
      000000                        140 __sdcc_init_data:
                                    141 ; stm8_genXINIT() start
      000000 AEr00r00         [ 2]  142 	ldw x, #l_DATA
      000003 27 07            [ 1]  143 	jreq	00002$
      000005                        144 00001$:
      000005 72 4FuFFuFF      [ 1]  145 	clr (s_DATA - 1, x)
      000009 5A               [ 2]  146 	decw x
      00000A 26 F9            [ 1]  147 	jrne	00001$
      00000C                        148 00002$:
      00000C AEr00r00         [ 2]  149 	ldw	x, #l_INITIALIZER
      00000F 27 09            [ 1]  150 	jreq	00004$
      000011                        151 00003$:
      000011 D6uFFuFF         [ 1]  152 	ld	a, (s_INITIALIZER - 1, x)
      000014 D7uFFuFF         [ 1]  153 	ld	(s_INITIALIZED - 1, x), a
      000017 5A               [ 2]  154 	decw	x
      000018 26 F7            [ 1]  155 	jrne	00003$
      00001A                        156 00004$:
                                    157 ; stm8_genXINIT() end
                                    158 	.area GSFINAL
      000000 CCr00r80         [ 2]  159 	jp	__sdcc_program_startup
                                    160 ;--------------------------------------------------------
                                    161 ; Home
                                    162 ;--------------------------------------------------------
                                    163 	.area HOME
                                    164 	.area HOME
      000080                        165 __sdcc_program_startup:
      000080 CCr05rA4         [ 2]  166 	jp	_main
                                    167 ;	return from main will return to caller
                                    168 ;--------------------------------------------------------
                                    169 ; code
                                    170 ;--------------------------------------------------------
                                    171 	.area CODE
                                    172 ;	delay.c: 7: void delay_init()
                                    173 ;	-----------------------------------------
                                    174 ;	 function delay_init
                                    175 ;	-----------------------------------------
      000000                        176 _delay_init:
                                    177 ;	delay.c: 9: TIM4_PSCR = 4; // CLK/16
      000000 35 04 53 47      [ 1]  178 	mov	0x5347+0, #0x04
      000004 81               [ 4]  179 	ret
                                    180 ;	delay.c: 12: void delay_us(unsigned long delus)
                                    181 ;	-----------------------------------------
                                    182 ;	 function delay_us
                                    183 ;	-----------------------------------------
      000005                        184 _delay_us:
      000005 52 06            [ 2]  185 	sub	sp, #6
                                    186 ;	delay.c: 16: for(du=0;du<(delus/10);du++)
      000007 4B 0A            [ 1]  187 	push	#0x0a
      000009 5F               [ 1]  188 	clrw	x
      00000A 89               [ 2]  189 	pushw	x
      00000B 4B 00            [ 1]  190 	push	#0x00
      00000D 1E 0F            [ 2]  191 	ldw	x, (0x0f, sp)
      00000F 89               [ 2]  192 	pushw	x
      000010 1E 0F            [ 2]  193 	ldw	x, (0x0f, sp)
      000012 89               [ 2]  194 	pushw	x
      000013 CDr00r00         [ 4]  195 	call	__divulong
      000016 5B 08            [ 2]  196 	addw	sp, #8
      000018 1F 05            [ 2]  197 	ldw	(0x05, sp), x
      00001A 17 03            [ 2]  198 	ldw	(0x03, sp), y
      00001C 5F               [ 1]  199 	clrw	x
      00001D 1F 01            [ 2]  200 	ldw	(0x01, sp), x
      00001F                        201 00103$:
      00001F 1E 01            [ 2]  202 	ldw	x, (0x01, sp)
      000021 90 5F            [ 1]  203 	clrw	y
      000023 13 05            [ 2]  204 	cpw	x, (0x05, sp)
      000025 90 9F            [ 1]  205 	ld	a, yl
      000027 12 04            [ 1]  206 	sbc	a, (0x04, sp)
      000029 90 9E            [ 1]  207 	ld	a, yh
      00002B 12 03            [ 1]  208 	sbc	a, (0x03, sp)
      00002D 24 0D            [ 1]  209 	jrnc	00101$
                                    210 ;	delay.c: 18: delay_timer(100);
      00002F 4B 64            [ 1]  211 	push	#0x64
      000031 CDr00r9A         [ 4]  212 	call	_delay_timer
      000034 84               [ 1]  213 	pop	a
                                    214 ;	delay.c: 16: for(du=0;du<(delus/10);du++)
      000035 1E 01            [ 2]  215 	ldw	x, (0x01, sp)
      000037 5C               [ 2]  216 	incw	x
      000038 1F 01            [ 2]  217 	ldw	(0x01, sp), x
      00003A 20 E3            [ 2]  218 	jra	00103$
      00003C                        219 00101$:
                                    220 ;	delay.c: 20: delay_timer(delus%10);
      00003C 4B 0A            [ 1]  221 	push	#0x0a
      00003E 5F               [ 1]  222 	clrw	x
      00003F 89               [ 2]  223 	pushw	x
      000040 4B 00            [ 1]  224 	push	#0x00
      000042 1E 0F            [ 2]  225 	ldw	x, (0x0f, sp)
      000044 89               [ 2]  226 	pushw	x
      000045 1E 0F            [ 2]  227 	ldw	x, (0x0f, sp)
      000047 89               [ 2]  228 	pushw	x
      000048 CDr00r00         [ 4]  229 	call	__modulong
      00004B 5B 08            [ 2]  230 	addw	sp, #8
      00004D 9F               [ 1]  231 	ld	a, xl
      00004E 88               [ 1]  232 	push	a
      00004F CDr00r9A         [ 4]  233 	call	_delay_timer
      000052 5B 07            [ 2]  234 	addw	sp, #7
      000054 81               [ 4]  235 	ret
                                    236 ;	delay.c: 23: void delay_ms(unsigned long delms)
                                    237 ;	-----------------------------------------
                                    238 ;	 function delay_ms
                                    239 ;	-----------------------------------------
      000055                        240 _delay_ms:
      000055 52 08            [ 2]  241 	sub	sp, #8
                                    242 ;	delay.c: 27: for(dm=0;dm<(delms*100);dm++)
      000057 1E 0D            [ 2]  243 	ldw	x, (0x0d, sp)
      000059 89               [ 2]  244 	pushw	x
      00005A 1E 0D            [ 2]  245 	ldw	x, (0x0d, sp)
      00005C 89               [ 2]  246 	pushw	x
      00005D 4B 64            [ 1]  247 	push	#0x64
      00005F 5F               [ 1]  248 	clrw	x
      000060 89               [ 2]  249 	pushw	x
      000061 4B 00            [ 1]  250 	push	#0x00
      000063 CDr00r00         [ 4]  251 	call	__mullong
      000066 5B 08            [ 2]  252 	addw	sp, #8
      000068 1F 07            [ 2]  253 	ldw	(0x07, sp), x
      00006A 17 05            [ 2]  254 	ldw	(0x05, sp), y
      00006C 5F               [ 1]  255 	clrw	x
      00006D 4F               [ 1]  256 	clr	a
      00006E 0F 01            [ 1]  257 	clr	(0x01, sp)
      000070                        258 00103$:
      000070 88               [ 1]  259 	push	a
      000071 13 08            [ 2]  260 	cpw	x, (0x08, sp)
      000073 7B 01            [ 1]  261 	ld	a, (1, sp)
      000075 12 07            [ 1]  262 	sbc	a, (0x07, sp)
      000077 7B 02            [ 1]  263 	ld	a, (0x02, sp)
      000079 12 06            [ 1]  264 	sbc	a, (0x06, sp)
      00007B 84               [ 1]  265 	pop	a
      00007C 24 19            [ 1]  266 	jrnc	00105$
                                    267 ;	delay.c: 29: delay_timer(100);
      00007E 88               [ 1]  268 	push	a
      00007F 89               [ 2]  269 	pushw	x
      000080 4B 64            [ 1]  270 	push	#0x64
      000082 CDr00r9A         [ 4]  271 	call	_delay_timer
      000085 84               [ 1]  272 	pop	a
      000086 85               [ 2]  273 	popw	x
      000087 84               [ 1]  274 	pop	a
                                    275 ;	delay.c: 27: for(dm=0;dm<(delms*100);dm++)
      000088 1C 00 01         [ 2]  276 	addw	x, #0x0001
      00008B A9 00            [ 1]  277 	adc	a, #0x00
      00008D 88               [ 1]  278 	push	a
      00008E 7B 02            [ 1]  279 	ld	a, (0x02, sp)
      000090 A9 00            [ 1]  280 	adc	a, #0x00
      000092 6B 02            [ 1]  281 	ld	(0x02, sp), a
      000094 84               [ 1]  282 	pop	a
      000095 20 D9            [ 2]  283 	jra	00103$
      000097                        284 00105$:
      000097 5B 08            [ 2]  285 	addw	sp, #8
      000099 81               [ 4]  286 	ret
                                    287 ;	delay.c: 33: void delay_timer(unsigned char deltim)
                                    288 ;	-----------------------------------------
                                    289 ;	 function delay_timer
                                    290 ;	-----------------------------------------
      00009A                        291 _delay_timer:
                                    292 ;	delay.c: 35: TIM4_CR1 = (1<<TIM4_CR1_CEN);
      00009A 35 01 53 40      [ 1]  293 	mov	0x5340+0, #0x01
                                    294 ;	delay.c: 36: while(TIM4_CNTR<deltim);
      00009E                        295 00101$:
      00009E AE 53 46         [ 2]  296 	ldw	x, #0x5346
      0000A1 F6               [ 1]  297 	ld	a, (x)
      0000A2 11 03            [ 1]  298 	cp	a, (0x03, sp)
      0000A4 25 F8            [ 1]  299 	jrc	00101$
                                    300 ;	delay.c: 37: TIM4_CR1 = (0<<TIM4_CR1_CEN);
      0000A6 35 00 53 40      [ 1]  301 	mov	0x5340+0, #0x00
                                    302 ;	delay.c: 38: TIM4_CNTR = 0; //reset timer	
      0000AA 35 00 53 46      [ 1]  303 	mov	0x5346+0, #0x00
      0000AE 81               [ 4]  304 	ret
                                    305 ;	periph_stm8s.c: 16: void clock_init()
                                    306 ;	-----------------------------------------
                                    307 ;	 function clock_init
                                    308 ;	-----------------------------------------
      0000AF                        309 _clock_init:
                                    310 ;	periph_stm8s.c: 18: CLK_CKDIVR = 0x00; //fMASTER = fCPU = fHSI = 16MHz
      0000AF 35 00 50 C6      [ 1]  311 	mov	0x50c6+0, #0x00
                                    312 ;	periph_stm8s.c: 19: CLK_ICKR = (1<<CLK_ICKR_HSIEN);	//High Speed Internal RC Oscillator enabled
      0000B3 35 01 50 C0      [ 1]  313 	mov	0x50c0+0, #0x01
      0000B7 81               [ 4]  314 	ret
                                    315 ;	periph_stm8s.c: 24: void i2c_init()
                                    316 ;	-----------------------------------------
                                    317 ;	 function i2c_init
                                    318 ;	-----------------------------------------
      0000B8                        319 _i2c_init:
                                    320 ;	periph_stm8s.c: 26: I2C_CR1 = (0<<I2C_CR1_PE); //Disable I2C before configuration starts
      0000B8 35 00 52 10      [ 1]  321 	mov	0x5210+0, #0x00
                                    322 ;	periph_stm8s.c: 27: I2C_FREQR = 16;	//fCLK = 16 MHz
      0000BC 35 10 52 12      [ 1]  323 	mov	0x5212+0, #0x10
                                    324 ;	periph_stm8s.c: 28: I2C_CCRH = (0<<I2C_CCRH_FS)|(0<<I2C_CCRH_CCR11)|(0<<I2C_CCRH_CCR10)|(0<<I2C_CCRH_CCR9)|(0<<I2C_CCRH_CCR8); //Standard Mode
      0000C0 35 00 52 1C      [ 1]  325 	mov	0x521c+0, #0x00
                                    326 ;	periph_stm8s.c: 29: I2C_CCRL = 0x80;  //Clock Speed = 100 kHz
      0000C4 35 80 52 1B      [ 1]  327 	mov	0x521b+0, #0x80
                                    328 ;	periph_stm8s.c: 31: I2C_OARH = (0<<I2C_OARH_ADDMODE)|(1<<I2C_OARH_ADDCONF); //7-bit address mode, ADDCONF always must be 1
      0000C8 35 40 52 14      [ 1]  329 	mov	0x5214+0, #0x40
                                    330 ;	periph_stm8s.c: 32: I2C_TRISER = 17;  //Setup Bus Characteristic
      0000CC 35 11 52 1D      [ 1]  331 	mov	0x521d+0, #0x11
                                    332 ;	periph_stm8s.c: 34: I2C_CR1 = (1<<I2C_CR1_PE);  //Enable I2C after configuration complete
      0000D0 35 01 52 10      [ 1]  333 	mov	0x5210+0, #0x01
      0000D4 81               [ 4]  334 	ret
                                    335 ;	periph_stm8s.c: 37: void i2c_set_start()
                                    336 ;	-----------------------------------------
                                    337 ;	 function i2c_set_start
                                    338 ;	-----------------------------------------
      0000D5                        339 _i2c_set_start:
                                    340 ;	periph_stm8s.c: 39: I2C_CR2 |= (1<<I2C_CR2_START);
      0000D5 72 10 52 11      [ 1]  341 	bset	0x5211, #0
      0000D9 81               [ 4]  342 	ret
                                    343 ;	periph_stm8s.c: 42: void i2c_set_address(unsigned char addr, unsigned char dir)
                                    344 ;	-----------------------------------------
                                    345 ;	 function i2c_set_address
                                    346 ;	-----------------------------------------
      0000DA                        347 _i2c_set_address:
                                    348 ;	periph_stm8s.c: 44: if(dir==I2C_READ) I2C_DR = (addr<<1)|dir;
      0000DA 7B 03            [ 1]  349 	ld	a, (0x03, sp)
      0000DC 97               [ 1]  350 	ld	xl, a
      0000DD 58               [ 2]  351 	sllw	x
      0000DE 7B 04            [ 1]  352 	ld	a, (0x04, sp)
      0000E0 A1 01            [ 1]  353 	cp	a, #0x01
      0000E2 26 09            [ 1]  354 	jrne	00104$
      0000E4 9F               [ 1]  355 	ld	a, xl
      0000E5 1A 04            [ 1]  356 	or	a, (0x04, sp)
      0000E7 AE 52 16         [ 2]  357 	ldw	x, #0x5216
      0000EA F7               [ 1]  358 	ld	(x), a
      0000EB 20 0D            [ 2]  359 	jra	00106$
      0000ED                        360 00104$:
                                    361 ;	periph_stm8s.c: 45: else if(dir==I2C_WRITE) I2C_DR = (addr<<1)&dir;
      0000ED 7B 04            [ 1]  362 	ld	a, (0x04, sp)
      0000EF A1 FE            [ 1]  363 	cp	a, #0xfe
      0000F1 26 07            [ 1]  364 	jrne	00106$
      0000F3 9F               [ 1]  365 	ld	a, xl
      0000F4 14 04            [ 1]  366 	and	a, (0x04, sp)
      0000F6 AE 52 16         [ 2]  367 	ldw	x, #0x5216
      0000F9 F7               [ 1]  368 	ld	(x), a
      0000FA                        369 00106$:
      0000FA 81               [ 4]  370 	ret
                                    371 ;	periph_stm8s.c: 49: void i2c_set_stop()
                                    372 ;	-----------------------------------------
                                    373 ;	 function i2c_set_stop
                                    374 ;	-----------------------------------------
      0000FB                        375 _i2c_set_stop:
                                    376 ;	periph_stm8s.c: 51: I2C_CR2 |= (1<<I2C_CR2_STOP);
      0000FB AE 52 11         [ 2]  377 	ldw	x, #0x5211
      0000FE F6               [ 1]  378 	ld	a, (x)
      0000FF AA 02            [ 1]  379 	or	a, #0x02
      000101 F7               [ 1]  380 	ld	(x), a
      000102 81               [ 4]  381 	ret
                                    382 ;	periph_stm8s.c: 54: void i2c_clear_ack()
                                    383 ;	-----------------------------------------
                                    384 ;	 function i2c_clear_ack
                                    385 ;	-----------------------------------------
      000103                        386 _i2c_clear_ack:
                                    387 ;	periph_stm8s.c: 56: I2C_CR2 &= ~(1<<I2C_CR2_ACK); //Disable Acknowledge
      000103 AE 52 11         [ 2]  388 	ldw	x, #0x5211
      000106 F6               [ 1]  389 	ld	a, (x)
      000107 A4 FB            [ 1]  390 	and	a, #0xfb
      000109 F7               [ 1]  391 	ld	(x), a
      00010A 81               [ 4]  392 	ret
                                    393 ;	periph_stm8s.c: 59: void i2c_set_ack()
                                    394 ;	-----------------------------------------
                                    395 ;	 function i2c_set_ack
                                    396 ;	-----------------------------------------
      00010B                        397 _i2c_set_ack:
                                    398 ;	periph_stm8s.c: 61: I2C_CR2 |= (1<<I2C_CR2_ACK); //Enable Acknowledge
      00010B AE 52 11         [ 2]  399 	ldw	x, #0x5211
      00010E F6               [ 1]  400 	ld	a, (x)
      00010F AA 04            [ 1]  401 	or	a, #0x04
      000111 F7               [ 1]  402 	ld	(x), a
      000112 81               [ 4]  403 	ret
                                    404 ;	periph_stm8s.c: 64: void i2c_ack_pos_current()
                                    405 ;	-----------------------------------------
                                    406 ;	 function i2c_ack_pos_current
                                    407 ;	-----------------------------------------
      000113                        408 _i2c_ack_pos_current:
                                    409 ;	periph_stm8s.c: 66: I2C_CR2 &= ~(1<<I2C_CR2_POS); //ACK bit controls the (N)ACK of the current byte being received in the shift register
      000113 AE 52 11         [ 2]  410 	ldw	x, #0x5211
      000116 F6               [ 1]  411 	ld	a, (x)
      000117 A4 F7            [ 1]  412 	and	a, #0xf7
      000119 F7               [ 1]  413 	ld	(x), a
      00011A 81               [ 4]  414 	ret
                                    415 ;	periph_stm8s.c: 69: void i2c_ack_pos_next()
                                    416 ;	-----------------------------------------
                                    417 ;	 function i2c_ack_pos_next
                                    418 ;	-----------------------------------------
      00011B                        419 _i2c_ack_pos_next:
                                    420 ;	periph_stm8s.c: 71: I2C_CR2 |= (1<<I2C_CR2_POS); //ACK bit controls the (N)ACK of the next byte which will be received in the shift register
      00011B AE 52 11         [ 2]  421 	ldw	x, #0x5211
      00011E F6               [ 1]  422 	ld	a, (x)
      00011F AA 08            [ 1]  423 	or	a, #0x08
      000121 F7               [ 1]  424 	ld	(x), a
      000122 81               [ 4]  425 	ret
                                    426 ;	periph_stm8s.c: 74: void i2c_poll_SB()
                                    427 ;	-----------------------------------------
                                    428 ;	 function i2c_poll_SB
                                    429 ;	-----------------------------------------
      000123                        430 _i2c_poll_SB:
                                    431 ;	periph_stm8s.c: 76: while((I2C_SR1&(1<<I2C_SR1_SB))!=(1<<I2C_SR1_SB)){}
      000123                        432 00101$:
      000123 AE 52 17         [ 2]  433 	ldw	x, #0x5217
      000126 F6               [ 1]  434 	ld	a, (x)
      000127 A4 01            [ 1]  435 	and	a, #0x01
      000129 A1 01            [ 1]  436 	cp	a, #0x01
      00012B 26 F6            [ 1]  437 	jrne	00101$
      00012D 81               [ 4]  438 	ret
                                    439 ;	periph_stm8s.c: 79: void i2c_poll_ADDR()
                                    440 ;	-----------------------------------------
                                    441 ;	 function i2c_poll_ADDR
                                    442 ;	-----------------------------------------
      00012E                        443 _i2c_poll_ADDR:
                                    444 ;	periph_stm8s.c: 81: while((I2C_SR1&(1<<I2C_SR1_ADDR))!=(1<<I2C_SR1_ADDR)){}
      00012E                        445 00101$:
      00012E AE 52 17         [ 2]  446 	ldw	x, #0x5217
      000131 F6               [ 1]  447 	ld	a, (x)
      000132 A4 02            [ 1]  448 	and	a, #0x02
      000134 A1 02            [ 1]  449 	cp	a, #0x02
      000136 26 F6            [ 1]  450 	jrne	00101$
      000138 81               [ 4]  451 	ret
                                    452 ;	periph_stm8s.c: 84: void i2c_poll_BTF()
                                    453 ;	-----------------------------------------
                                    454 ;	 function i2c_poll_BTF
                                    455 ;	-----------------------------------------
      000139                        456 _i2c_poll_BTF:
                                    457 ;	periph_stm8s.c: 86: while((I2C_SR1&(1<<I2C_SR1_BTF))!=(1<<I2C_SR1_BTF)){}
      000139                        458 00101$:
      000139 AE 52 17         [ 2]  459 	ldw	x, #0x5217
      00013C F6               [ 1]  460 	ld	a, (x)
      00013D A4 04            [ 1]  461 	and	a, #0x04
      00013F A1 04            [ 1]  462 	cp	a, #0x04
      000141 26 F6            [ 1]  463 	jrne	00101$
      000143 81               [ 4]  464 	ret
                                    465 ;	periph_stm8s.c: 89: void i2c_poll_TXE()
                                    466 ;	-----------------------------------------
                                    467 ;	 function i2c_poll_TXE
                                    468 ;	-----------------------------------------
      000144                        469 _i2c_poll_TXE:
                                    470 ;	periph_stm8s.c: 91: while((I2C_SR1&(1<<I2C_SR1_TXE))!=(1<<I2C_SR1_TXE)){}
      000144                        471 00101$:
      000144 AE 52 17         [ 2]  472 	ldw	x, #0x5217
      000147 F6               [ 1]  473 	ld	a, (x)
      000148 A4 80            [ 1]  474 	and	a, #0x80
      00014A A1 80            [ 1]  475 	cp	a, #0x80
      00014C 26 F6            [ 1]  476 	jrne	00101$
      00014E 81               [ 4]  477 	ret
                                    478 ;	periph_stm8s.c: 94: void i2c_poll_RXNE()
                                    479 ;	-----------------------------------------
                                    480 ;	 function i2c_poll_RXNE
                                    481 ;	-----------------------------------------
      00014F                        482 _i2c_poll_RXNE:
                                    483 ;	periph_stm8s.c: 96: while((I2C_SR1&(1<<I2C_SR1_RXNE))!=(1<<I2C_SR1_RXNE)){}
      00014F                        484 00101$:
      00014F AE 52 17         [ 2]  485 	ldw	x, #0x5217
      000152 F6               [ 1]  486 	ld	a, (x)
      000153 A4 40            [ 1]  487 	and	a, #0x40
      000155 A1 40            [ 1]  488 	cp	a, #0x40
      000157 26 F6            [ 1]  489 	jrne	00101$
      000159 81               [ 4]  490 	ret
                                    491 ;	periph_stm8s.c: 99: void i2c_clear_bits()
                                    492 ;	-----------------------------------------
                                    493 ;	 function i2c_clear_bits
                                    494 ;	-----------------------------------------
      00015A                        495 _i2c_clear_bits:
                                    496 ;	periph_stm8s.c: 101: readreg = I2C_SR1;
      00015A AE 52 17         [ 2]  497 	ldw	x, #0x5217
      00015D F6               [ 1]  498 	ld	a, (x)
      00015E C7u00u00         [ 1]  499 	ld	_readreg+0, a
      000161 81               [ 4]  500 	ret
                                    501 ;	periph_stm8s.c: 104: void i2c_clear_ADDR()
                                    502 ;	-----------------------------------------
                                    503 ;	 function i2c_clear_ADDR
                                    504 ;	-----------------------------------------
      000162                        505 _i2c_clear_ADDR:
                                    506 ;	periph_stm8s.c: 106: readreg = I2C_SR1;
      000162 AE 52 17         [ 2]  507 	ldw	x, #0x5217
      000165 F6               [ 1]  508 	ld	a, (x)
                                    509 ;	periph_stm8s.c: 107: readreg = I2C_SR3;
      000166 AE 52 19         [ 2]  510 	ldw	x, #0x5219
      000169 F6               [ 1]  511 	ld	a, (x)
      00016A C7u00u00         [ 1]  512 	ld	_readreg+0, a
      00016D 81               [ 4]  513 	ret
                                    514 ;	periph_stm8s.c: 110: void i2c_enable_interrupts()
                                    515 ;	-----------------------------------------
                                    516 ;	 function i2c_enable_interrupts
                                    517 ;	-----------------------------------------
      00016E                        518 _i2c_enable_interrupts:
                                    519 ;	periph_stm8s.c: 112: I2C_ITR = 0x07;
      00016E 35 07 52 1A      [ 1]  520 	mov	0x521a+0, #0x07
      000172 81               [ 4]  521 	ret
                                    522 ;	periph_stm8s.c: 114: void i2c_disable_interrupts()
                                    523 ;	-----------------------------------------
                                    524 ;	 function i2c_disable_interrupts
                                    525 ;	-----------------------------------------
      000173                        526 _i2c_disable_interrupts:
                                    527 ;	periph_stm8s.c: 116: I2C_ITR = 0x00;
      000173 35 00 52 1A      [ 1]  528 	mov	0x521a+0, #0x00
      000177 81               [ 4]  529 	ret
                                    530 ;	periph_stm8s.c: 119: void i2c_write_1byte(unsigned char devaddr, unsigned char dbyte1)
                                    531 ;	-----------------------------------------
                                    532 ;	 function i2c_write_1byte
                                    533 ;	-----------------------------------------
      000178                        534 _i2c_write_1byte:
                                    535 ;	periph_stm8s.c: 121: i2c_set_start(); //Send Start Condition
      000178 CDr00rD5         [ 4]  536 	call	_i2c_set_start
                                    537 ;	periph_stm8s.c: 122: i2c_poll_SB(); //Wait until Start Bit is set --> Start Condition generated
      00017B CDr01r23         [ 4]  538 	call	_i2c_poll_SB
                                    539 ;	periph_stm8s.c: 123: i2c_clear_bits(); //Clear Start Bit
      00017E CDr01r5A         [ 4]  540 	call	_i2c_clear_bits
                                    541 ;	periph_stm8s.c: 125: i2c_set_address(devaddr,I2C_WRITE); //Write Address w Direction : Write
      000181 4B FE            [ 1]  542 	push	#0xfe
      000183 7B 04            [ 1]  543 	ld	a, (0x04, sp)
      000185 88               [ 1]  544 	push	a
      000186 CDr00rDA         [ 4]  545 	call	_i2c_set_address
      000189 5B 02            [ 2]  546 	addw	sp, #2
                                    547 ;	periph_stm8s.c: 126: i2c_poll_ADDR(); //Wait until Address Flag is set --> Address matched
      00018B CDr01r2E         [ 4]  548 	call	_i2c_poll_ADDR
                                    549 ;	periph_stm8s.c: 127: i2c_clear_ADDR(); //Clear Address Flag
      00018E CDr01r62         [ 4]  550 	call	_i2c_clear_ADDR
                                    551 ;	periph_stm8s.c: 129: i2c_poll_TXE(); //Wait until Data Register is empty. In practice, this step is optional
      000191 CDr01r44         [ 4]  552 	call	_i2c_poll_TXE
                                    553 ;	periph_stm8s.c: 130: I2C_DR = dbyte1; //Command or Data
      000194 AE 52 16         [ 2]  554 	ldw	x, #0x5216
      000197 7B 04            [ 1]  555 	ld	a, (0x04, sp)
      000199 F7               [ 1]  556 	ld	(x), a
                                    557 ;	periph_stm8s.c: 131: i2c_poll_BTF(); //Wait until Byte Transfer Flag is set --> 1 Byte Data Transfer is complete
      00019A CDr01r39         [ 4]  558 	call	_i2c_poll_BTF
                                    559 ;	periph_stm8s.c: 132: i2c_clear_bits(); //Clear Byte Transfer Flag
      00019D CDr01r5A         [ 4]  560 	call	_i2c_clear_bits
                                    561 ;	periph_stm8s.c: 134: i2c_set_stop(); //Send Stop Condition
      0001A0 CDr00rFB         [ 4]  562 	call	_i2c_set_stop
                                    563 ;	periph_stm8s.c: 135: i2c_clear_bits(); //Clear Stop Bit
      0001A3 CCr01r5A         [ 2]  564 	jp	_i2c_clear_bits
                                    565 ;	periph_stm8s.c: 138: void i2c_write_2byte(unsigned char devaddr, unsigned char dbyte1, unsigned char dbyte2)
                                    566 ;	-----------------------------------------
                                    567 ;	 function i2c_write_2byte
                                    568 ;	-----------------------------------------
      0001A6                        569 _i2c_write_2byte:
                                    570 ;	periph_stm8s.c: 140: i2c_set_start(); //Send Start Condition
      0001A6 CDr00rD5         [ 4]  571 	call	_i2c_set_start
                                    572 ;	periph_stm8s.c: 141: i2c_poll_SB(); //Wait until Start Bit is set --> Start Condition generated
      0001A9 CDr01r23         [ 4]  573 	call	_i2c_poll_SB
                                    574 ;	periph_stm8s.c: 142: i2c_clear_bits(); //Clear Start Bit
      0001AC CDr01r5A         [ 4]  575 	call	_i2c_clear_bits
                                    576 ;	periph_stm8s.c: 144: i2c_set_address(devaddr,I2C_WRITE); //Write Address w Direction : Write
      0001AF 4B FE            [ 1]  577 	push	#0xfe
      0001B1 7B 04            [ 1]  578 	ld	a, (0x04, sp)
      0001B3 88               [ 1]  579 	push	a
      0001B4 CDr00rDA         [ 4]  580 	call	_i2c_set_address
      0001B7 5B 02            [ 2]  581 	addw	sp, #2
                                    582 ;	periph_stm8s.c: 145: i2c_poll_ADDR(); //Wait until Address Flag is set --> Address matched
      0001B9 CDr01r2E         [ 4]  583 	call	_i2c_poll_ADDR
                                    584 ;	periph_stm8s.c: 146: i2c_clear_ADDR(); //Clear Address Flag
      0001BC CDr01r62         [ 4]  585 	call	_i2c_clear_ADDR
                                    586 ;	periph_stm8s.c: 148: i2c_poll_TXE(); //Wait until Data Register is empty. In practice, this step is optional
      0001BF CDr01r44         [ 4]  587 	call	_i2c_poll_TXE
                                    588 ;	periph_stm8s.c: 149: I2C_DR = dbyte1; //1st Byte of Command or Data
      0001C2 AE 52 16         [ 2]  589 	ldw	x, #0x5216
      0001C5 7B 04            [ 1]  590 	ld	a, (0x04, sp)
      0001C7 F7               [ 1]  591 	ld	(x), a
                                    592 ;	periph_stm8s.c: 150: i2c_poll_BTF(); //Wait until Byte Transfer Flag is set --> 1 Byte Data Transfer is complete
      0001C8 CDr01r39         [ 4]  593 	call	_i2c_poll_BTF
                                    594 ;	periph_stm8s.c: 151: i2c_clear_bits(); //Clear Byte Transfer Flag
      0001CB CDr01r5A         [ 4]  595 	call	_i2c_clear_bits
                                    596 ;	periph_stm8s.c: 153: I2C_DR = dbyte2; //2nd Byte of Command or Data
      0001CE AE 52 16         [ 2]  597 	ldw	x, #0x5216
      0001D1 7B 05            [ 1]  598 	ld	a, (0x05, sp)
      0001D3 F7               [ 1]  599 	ld	(x), a
                                    600 ;	periph_stm8s.c: 154: i2c_poll_BTF(); //Wait until Byte Transfer Flag is set --> 1 Byte Data Transfer is complete
      0001D4 CDr01r39         [ 4]  601 	call	_i2c_poll_BTF
                                    602 ;	periph_stm8s.c: 155: i2c_clear_bits(); //Clear Byte Transfer Flag
      0001D7 CDr01r5A         [ 4]  603 	call	_i2c_clear_bits
                                    604 ;	periph_stm8s.c: 157: i2c_set_stop(); //Send Stop Condition
      0001DA CDr00rFB         [ 4]  605 	call	_i2c_set_stop
                                    606 ;	periph_stm8s.c: 158: i2c_clear_bits(); //Clear Stop Bit
      0001DD CCr01r5A         [ 2]  607 	jp	_i2c_clear_bits
                                    608 ;	periph_stm8s.c: 163: void adc_init()
                                    609 ;	-----------------------------------------
                                    610 ;	 function adc_init
                                    611 ;	-----------------------------------------
      0001E0                        612 _adc_init:
                                    613 ;	periph_stm8s.c: 165: ADC1_CR1 = fADC_fMASTER_8<<ADC1_CR1_SPSEL; // ADCCLK = MCLK/8
      0001E0 35 40 54 01      [ 1]  614 	mov	0x5401+0, #0x40
                                    615 ;	periph_stm8s.c: 166: ADC1_CR2 = (1<<ADC1_CR2_ALIGN);  // right alignment adc data
      0001E4 35 08 54 02      [ 1]  616 	mov	0x5402+0, #0x08
                                    617 ;	periph_stm8s.c: 168: ADC1_CR1 |= (1<<ADC1_CR1_ADON);  // turn on ADC
      0001E8 72 10 54 01      [ 1]  618 	bset	0x5401, #0
      0001EC 81               [ 4]  619 	ret
                                    620 ;	periph_stm8s.c: 172: unsigned int read_adc(unsigned char adcch)
                                    621 ;	-----------------------------------------
                                    622 ;	 function read_adc
                                    623 ;	-----------------------------------------
      0001ED                        624 _read_adc:
      0001ED 52 04            [ 2]  625 	sub	sp, #4
                                    626 ;	periph_stm8s.c: 176: ADC1_CSR &= 0xF0;  // select
      0001EF AE 54 00         [ 2]  627 	ldw	x, #0x5400
      0001F2 F6               [ 1]  628 	ld	a, (x)
      0001F3 A4 F0            [ 1]  629 	and	a, #0xf0
      0001F5 F7               [ 1]  630 	ld	(x), a
                                    631 ;	periph_stm8s.c: 177: ADC1_CSR |= adcch; // channel
      0001F6 AE 54 00         [ 2]  632 	ldw	x, #0x5400
      0001F9 F6               [ 1]  633 	ld	a, (x)
      0001FA 1A 07            [ 1]  634 	or	a, (0x07, sp)
      0001FC AE 54 00         [ 2]  635 	ldw	x, #0x5400
      0001FF F7               [ 1]  636 	ld	(x), a
                                    637 ;	periph_stm8s.c: 180: ADC1_CR1 |= (1<<ADC1_CR1_ADON); // start conversion
      000200 72 10 54 01      [ 1]  638 	bset	0x5401, #0
                                    639 ;	periph_stm8s.c: 181: while(!((ADC1_CSR)&(1<<ADC1_CSR_EOC)));; // conversion is in progress
      000204                        640 00101$:
      000204 AE 54 00         [ 2]  641 	ldw	x, #0x5400
      000207 F6               [ 1]  642 	ld	a, (x)
      000208 4D               [ 1]  643 	tnz	a
      000209 2A F9            [ 1]  644 	jrpl	00101$
                                    645 ;	periph_stm8s.c: 182: adcval = (ADC1_DRH<<8) + ADC1_DRL;
      00020B AE 54 04         [ 2]  646 	ldw	x, #0x5404
      00020E F6               [ 1]  647 	ld	a, (x)
      00020F 0F 03            [ 1]  648 	clr	(0x03, sp)
      000211 6B 01            [ 1]  649 	ld	(0x01, sp), a
      000213 0F 02            [ 1]  650 	clr	(0x02, sp)
      000215 AE 54 05         [ 2]  651 	ldw	x, #0x5405
      000218 F6               [ 1]  652 	ld	a, (x)
      000219 5F               [ 1]  653 	clrw	x
      00021A 97               [ 1]  654 	ld	xl, a
      00021B 72 FB 01         [ 2]  655 	addw	x, (0x01, sp)
                                    656 ;	periph_stm8s.c: 183: ADC1_CSR |= (0<<ADC1_CSR_EOC); // reset EOC
      00021E 90 AE 54 00      [ 2]  657 	ldw	y, #0x5400
      000222 90 F6            [ 1]  658 	ld	a, (y)
      000224 90 AE 54 00      [ 2]  659 	ldw	y, #0x5400
      000228 90 F7            [ 1]  660 	ld	(y), a
                                    661 ;	periph_stm8s.c: 185: return adcval;
      00022A 5B 04            [ 2]  662 	addw	sp, #4
      00022C 81               [ 4]  663 	ret
                                    664 ;	periph_stm8s.c: 190: void uart1_init(unsigned char rxien) //UART Initialization
                                    665 ;	-----------------------------------------
                                    666 ;	 function uart1_init
                                    667 ;	-----------------------------------------
      00022D                        668 _uart1_init:
                                    669 ;	periph_stm8s.c: 194: UART1_BRR1 = 0x68;
      00022D 35 68 52 32      [ 1]  670 	mov	0x5232+0, #0x68
                                    671 ;	periph_stm8s.c: 195: UART1_BRR2 = 0x03;
      000231 35 03 52 33      [ 1]  672 	mov	0x5233+0, #0x03
                                    673 ;	periph_stm8s.c: 197: UART1_CR1 |= (0<<UART1_CR1_M)|(0<<UART1_CR1_PCEN); //8 bit Data; No Parity
      000235 AE 52 34         [ 2]  674 	ldw	x, #0x5234
      000238 F6               [ 1]  675 	ld	a, (x)
      000239 AE 52 34         [ 2]  676 	ldw	x, #0x5234
      00023C F7               [ 1]  677 	ld	(x), a
                                    678 ;	periph_stm8s.c: 198: UART1_CR3 |= (0<<UART1_CR3_STOP); //Stop Bit = 1
      00023D AE 52 36         [ 2]  679 	ldw	x, #0x5236
      000240 F6               [ 1]  680 	ld	a, (x)
      000241 AE 52 36         [ 2]  681 	ldw	x, #0x5236
      000244 F7               [ 1]  682 	ld	(x), a
                                    683 ;	periph_stm8s.c: 200: if(rxien==1) 
      000245 7B 03            [ 1]  684 	ld	a, (0x03, sp)
      000247 A1 01            [ 1]  685 	cp	a, #0x01
      000249 26 0B            [ 1]  686 	jrne	00102$
                                    687 ;	periph_stm8s.c: 202: UART1_CR2 |= (1<<UART1_CR2_RIEN); //Enable Interrupt on Receiver Mode
      00024B AE 52 35         [ 2]  688 	ldw	x, #0x5235
      00024E F6               [ 1]  689 	ld	a, (x)
      00024F AA 20            [ 1]  690 	or	a, #0x20
      000251 F7               [ 1]  691 	ld	(x), a
                                    692 ;	periph_stm8s.c: 203: ITC_SPR5 = (level_2<<ITC_SPR5_VECT18); //UART Interrupt Setting
      000252 35 00 7F 74      [ 1]  693 	mov	0x7f74+0, #0x00
      000256                        694 00102$:
                                    695 ;	periph_stm8s.c: 206: UART1_CR2 |= (1<<UART1_CR2_TEN); //Enable Transmitter Mode
      000256 AE 52 35         [ 2]  696 	ldw	x, #0x5235
      000259 F6               [ 1]  697 	ld	a, (x)
      00025A AA 08            [ 1]  698 	or	a, #0x08
      00025C F7               [ 1]  699 	ld	(x), a
                                    700 ;	periph_stm8s.c: 207: UART1_CR2 |= (1<<UART1_CR2_REN); //Enable Receiver Mode
      00025D AE 52 35         [ 2]  701 	ldw	x, #0x5235
      000260 F6               [ 1]  702 	ld	a, (x)
      000261 AA 04            [ 1]  703 	or	a, #0x04
      000263 F7               [ 1]  704 	ld	(x), a
      000264 81               [ 4]  705 	ret
                                    706 ;	periph_stm8s.c: 210: void uart1_send(unsigned char usend) //UART Transmit a Byte
                                    707 ;	-----------------------------------------
                                    708 ;	 function uart1_send
                                    709 ;	-----------------------------------------
      000265                        710 _uart1_send:
                                    711 ;	periph_stm8s.c: 212: UART1_DR = usend; //Write to UART Data Register
      000265 AE 52 31         [ 2]  712 	ldw	x, #0x5231
      000268 7B 03            [ 1]  713 	ld	a, (0x03, sp)
      00026A F7               [ 1]  714 	ld	(x), a
                                    715 ;	periph_stm8s.c: 213: while((UART1_SR&(1<<UART1_SR_TXE))!=(1<<UART1_SR_TXE)); //Wait until Transmission complete
      00026B                        716 00101$:
      00026B AE 52 30         [ 2]  717 	ldw	x, #0x5230
      00026E F6               [ 1]  718 	ld	a, (x)
      00026F A4 80            [ 1]  719 	and	a, #0x80
      000271 A1 80            [ 1]  720 	cp	a, #0x80
      000273 26 F6            [ 1]  721 	jrne	00101$
      000275 81               [ 4]  722 	ret
                                    723 ;	periph_stm8s.c: 216: unsigned char uart1_recv() //UART Receive a Byte (using Polling)
                                    724 ;	-----------------------------------------
                                    725 ;	 function uart1_recv
                                    726 ;	-----------------------------------------
      000276                        727 _uart1_recv:
                                    728 ;	periph_stm8s.c: 219: if((UART1_SR&(1<<UART1_SR_RXNE))==(1<<UART1_SR_RXNE)) //Check if any data in Data Register
      000276 AE 52 30         [ 2]  729 	ldw	x, #0x5230
      000279 F6               [ 1]  730 	ld	a, (x)
      00027A A4 20            [ 1]  731 	and	a, #0x20
      00027C A1 20            [ 1]  732 	cp	a, #0x20
      00027E 26 05            [ 1]  733 	jrne	00102$
                                    734 ;	periph_stm8s.c: 221: urecv = UART1_DR; //Read Data Register (RXNE cleared automatically)
      000280 AE 52 31         [ 2]  735 	ldw	x, #0x5231
      000283 F6               [ 1]  736 	ld	a, (x)
                                    737 ;	periph_stm8s.c: 223: else urecv=0;
      000284 21                     738 	.byte 0x21
      000285                        739 00102$:
      000285 4F               [ 1]  740 	clr	a
      000286                        741 00103$:
                                    742 ;	periph_stm8s.c: 224: return urecv;
      000286 81               [ 4]  743 	ret
                                    744 ;	periph_stm8s.c: 227: unsigned char uart1_recv_i() //UART Receive a Byte (using Interrupt)
                                    745 ;	-----------------------------------------
                                    746 ;	 function uart1_recv_i
                                    747 ;	-----------------------------------------
      000287                        748 _uart1_recv_i:
                                    749 ;	periph_stm8s.c: 230: urecv = UART1_DR; //Read Data Register (RXNE cleared automatically)
      000287 AE 52 31         [ 2]  750 	ldw	x, #0x5231
      00028A F6               [ 1]  751 	ld	a, (x)
                                    752 ;	periph_stm8s.c: 231: return urecv;
      00028B 81               [ 4]  753 	ret
                                    754 ;	oled_ssd1306.c: 7: void ssd1306_init(unsigned char olednum)
                                    755 ;	-----------------------------------------
                                    756 ;	 function ssd1306_init
                                    757 ;	-----------------------------------------
      00028C                        758 _ssd1306_init:
                                    759 ;	oled_ssd1306.c: 9: ssd1306_sendcom(olednum,0xAE); //Set Display Off
      00028C 4B AE            [ 1]  760 	push	#0xae
      00028E 7B 04            [ 1]  761 	ld	a, (0x04, sp)
      000290 88               [ 1]  762 	push	a
      000291 CDr03r87         [ 4]  763 	call	_ssd1306_sendcom
      000294 5B 02            [ 2]  764 	addw	sp, #2
                                    765 ;	oled_ssd1306.c: 10: ssd1306_sendcom(olednum,0xD5); //Set Display Clock Divider Ratio/Oscillator Frequency
      000296 4B D5            [ 1]  766 	push	#0xd5
      000298 7B 04            [ 1]  767 	ld	a, (0x04, sp)
      00029A 88               [ 1]  768 	push	a
      00029B CDr03r87         [ 4]  769 	call	_ssd1306_sendcom
      00029E 5B 02            [ 2]  770 	addw	sp, #2
                                    771 ;	oled_ssd1306.c: 11: ssd1306_sendcom(olednum,0x80);
      0002A0 4B 80            [ 1]  772 	push	#0x80
      0002A2 7B 04            [ 1]  773 	ld	a, (0x04, sp)
      0002A4 88               [ 1]  774 	push	a
      0002A5 CDr03r87         [ 4]  775 	call	_ssd1306_sendcom
      0002A8 5B 02            [ 2]  776 	addw	sp, #2
                                    777 ;	oled_ssd1306.c: 12: ssd1306_sendcom(olednum,0xA8); //Set Multiplex Ratio
      0002AA 4B A8            [ 1]  778 	push	#0xa8
      0002AC 7B 04            [ 1]  779 	ld	a, (0x04, sp)
      0002AE 88               [ 1]  780 	push	a
      0002AF CDr03r87         [ 4]  781 	call	_ssd1306_sendcom
      0002B2 5B 02            [ 2]  782 	addw	sp, #2
                                    783 ;	oled_ssd1306.c: 13: ssd1306_sendcom(olednum,0x3F);
      0002B4 4B 3F            [ 1]  784 	push	#0x3f
      0002B6 7B 04            [ 1]  785 	ld	a, (0x04, sp)
      0002B8 88               [ 1]  786 	push	a
      0002B9 CDr03r87         [ 4]  787 	call	_ssd1306_sendcom
      0002BC 5B 02            [ 2]  788 	addw	sp, #2
                                    789 ;	oled_ssd1306.c: 14: ssd1306_sendcom(olednum,0xD3); //Set Display Offset
      0002BE 4B D3            [ 1]  790 	push	#0xd3
      0002C0 7B 04            [ 1]  791 	ld	a, (0x04, sp)
      0002C2 88               [ 1]  792 	push	a
      0002C3 CDr03r87         [ 4]  793 	call	_ssd1306_sendcom
      0002C6 5B 02            [ 2]  794 	addw	sp, #2
                                    795 ;	oled_ssd1306.c: 15: ssd1306_sendcom(olednum,0x00);
      0002C8 4B 00            [ 1]  796 	push	#0x00
      0002CA 7B 04            [ 1]  797 	ld	a, (0x04, sp)
      0002CC 88               [ 1]  798 	push	a
      0002CD CDr03r87         [ 4]  799 	call	_ssd1306_sendcom
      0002D0 5B 02            [ 2]  800 	addw	sp, #2
                                    801 ;	oled_ssd1306.c: 16: ssd1306_sendcom(olednum,0x40); //Set Display Start Line
      0002D2 4B 40            [ 1]  802 	push	#0x40
      0002D4 7B 04            [ 1]  803 	ld	a, (0x04, sp)
      0002D6 88               [ 1]  804 	push	a
      0002D7 CDr03r87         [ 4]  805 	call	_ssd1306_sendcom
      0002DA 5B 02            [ 2]  806 	addw	sp, #2
                                    807 ;	oled_ssd1306.c: 17: ssd1306_sendcom(olednum,0x8D); //Set Charge Pump
      0002DC 4B 8D            [ 1]  808 	push	#0x8d
      0002DE 7B 04            [ 1]  809 	ld	a, (0x04, sp)
      0002E0 88               [ 1]  810 	push	a
      0002E1 CDr03r87         [ 4]  811 	call	_ssd1306_sendcom
      0002E4 5B 02            [ 2]  812 	addw	sp, #2
                                    813 ;	oled_ssd1306.c: 18: ssd1306_sendcom(olednum,0x14); //Internal VCC
      0002E6 4B 14            [ 1]  814 	push	#0x14
      0002E8 7B 04            [ 1]  815 	ld	a, (0x04, sp)
      0002EA 88               [ 1]  816 	push	a
      0002EB CDr03r87         [ 4]  817 	call	_ssd1306_sendcom
      0002EE 5B 02            [ 2]  818 	addw	sp, #2
                                    819 ;	oled_ssd1306.c: 19: ssd1306_sendcom(olednum,0x20); //Set Memory Mode
      0002F0 4B 20            [ 1]  820 	push	#0x20
      0002F2 7B 04            [ 1]  821 	ld	a, (0x04, sp)
      0002F4 88               [ 1]  822 	push	a
      0002F5 CDr03r87         [ 4]  823 	call	_ssd1306_sendcom
      0002F8 5B 02            [ 2]  824 	addw	sp, #2
                                    825 ;	oled_ssd1306.c: 20: ssd1306_sendcom(olednum,0x00); //Horizontal Addressing
      0002FA 4B 00            [ 1]  826 	push	#0x00
      0002FC 7B 04            [ 1]  827 	ld	a, (0x04, sp)
      0002FE 88               [ 1]  828 	push	a
      0002FF CDr03r87         [ 4]  829 	call	_ssd1306_sendcom
      000302 5B 02            [ 2]  830 	addw	sp, #2
                                    831 ;	oled_ssd1306.c: 21: ssd1306_sendcom(olednum,0xA1); //Set Segment Re-Map
      000304 4B A1            [ 1]  832 	push	#0xa1
      000306 7B 04            [ 1]  833 	ld	a, (0x04, sp)
      000308 88               [ 1]  834 	push	a
      000309 CDr03r87         [ 4]  835 	call	_ssd1306_sendcom
      00030C 5B 02            [ 2]  836 	addw	sp, #2
                                    837 ;	oled_ssd1306.c: 22: ssd1306_sendcom(olednum,0xC8); //Set COM Output Scan Direction
      00030E 4B C8            [ 1]  838 	push	#0xc8
      000310 7B 04            [ 1]  839 	ld	a, (0x04, sp)
      000312 88               [ 1]  840 	push	a
      000313 CDr03r87         [ 4]  841 	call	_ssd1306_sendcom
      000316 5B 02            [ 2]  842 	addw	sp, #2
                                    843 ;	oled_ssd1306.c: 23: ssd1306_sendcom(olednum,0xDA); //Set COM Pins HW Config
      000318 4B DA            [ 1]  844 	push	#0xda
      00031A 7B 04            [ 1]  845 	ld	a, (0x04, sp)
      00031C 88               [ 1]  846 	push	a
      00031D CDr03r87         [ 4]  847 	call	_ssd1306_sendcom
      000320 5B 02            [ 2]  848 	addw	sp, #2
                                    849 ;	oled_ssd1306.c: 24: ssd1306_sendcom(olednum,0x12);
      000322 4B 12            [ 1]  850 	push	#0x12
      000324 7B 04            [ 1]  851 	ld	a, (0x04, sp)
      000326 88               [ 1]  852 	push	a
      000327 CDr03r87         [ 4]  853 	call	_ssd1306_sendcom
      00032A 5B 02            [ 2]  854 	addw	sp, #2
                                    855 ;	oled_ssd1306.c: 25: ssd1306_sendcom(olednum,0x81); //Set Contrast Control
      00032C 4B 81            [ 1]  856 	push	#0x81
      00032E 7B 04            [ 1]  857 	ld	a, (0x04, sp)
      000330 88               [ 1]  858 	push	a
      000331 CDr03r87         [ 4]  859 	call	_ssd1306_sendcom
      000334 5B 02            [ 2]  860 	addw	sp, #2
                                    861 ;	oled_ssd1306.c: 26: ssd1306_sendcom(olednum,0xCF);
      000336 4B CF            [ 1]  862 	push	#0xcf
      000338 7B 04            [ 1]  863 	ld	a, (0x04, sp)
      00033A 88               [ 1]  864 	push	a
      00033B CDr03r87         [ 4]  865 	call	_ssd1306_sendcom
      00033E 5B 02            [ 2]  866 	addw	sp, #2
                                    867 ;	oled_ssd1306.c: 27: ssd1306_sendcom(olednum,0xD9); //Set Pre-Charge Period
      000340 4B D9            [ 1]  868 	push	#0xd9
      000342 7B 04            [ 1]  869 	ld	a, (0x04, sp)
      000344 88               [ 1]  870 	push	a
      000345 CDr03r87         [ 4]  871 	call	_ssd1306_sendcom
      000348 5B 02            [ 2]  872 	addw	sp, #2
                                    873 ;	oled_ssd1306.c: 28: ssd1306_sendcom(olednum,0xF1);
      00034A 4B F1            [ 1]  874 	push	#0xf1
      00034C 7B 04            [ 1]  875 	ld	a, (0x04, sp)
      00034E 88               [ 1]  876 	push	a
      00034F CDr03r87         [ 4]  877 	call	_ssd1306_sendcom
      000352 5B 02            [ 2]  878 	addw	sp, #2
                                    879 ;	oled_ssd1306.c: 29: ssd1306_sendcom(olednum,0xDB); //Set VCOMH Deselect Level
      000354 4B DB            [ 1]  880 	push	#0xdb
      000356 7B 04            [ 1]  881 	ld	a, (0x04, sp)
      000358 88               [ 1]  882 	push	a
      000359 CDr03r87         [ 4]  883 	call	_ssd1306_sendcom
      00035C 5B 02            [ 2]  884 	addw	sp, #2
                                    885 ;	oled_ssd1306.c: 30: ssd1306_sendcom(olednum,0x40);
      00035E 4B 40            [ 1]  886 	push	#0x40
      000360 7B 04            [ 1]  887 	ld	a, (0x04, sp)
      000362 88               [ 1]  888 	push	a
      000363 CDr03r87         [ 4]  889 	call	_ssd1306_sendcom
      000366 5B 02            [ 2]  890 	addw	sp, #2
                                    891 ;	oled_ssd1306.c: 31: ssd1306_sendcom(olednum,0xA4); //Set Entire Display On/Off
      000368 4B A4            [ 1]  892 	push	#0xa4
      00036A 7B 04            [ 1]  893 	ld	a, (0x04, sp)
      00036C 88               [ 1]  894 	push	a
      00036D CDr03r87         [ 4]  895 	call	_ssd1306_sendcom
      000370 5B 02            [ 2]  896 	addw	sp, #2
                                    897 ;	oled_ssd1306.c: 32: ssd1306_sendcom(olednum,0xA6); //Set Normal/Inverse Display
      000372 4B A6            [ 1]  898 	push	#0xa6
      000374 7B 04            [ 1]  899 	ld	a, (0x04, sp)
      000376 88               [ 1]  900 	push	a
      000377 CDr03r87         [ 4]  901 	call	_ssd1306_sendcom
      00037A 5B 02            [ 2]  902 	addw	sp, #2
                                    903 ;	oled_ssd1306.c: 33: ssd1306_sendcom(olednum,0xAF); //Set Display On
      00037C 4B AF            [ 1]  904 	push	#0xaf
      00037E 7B 04            [ 1]  905 	ld	a, (0x04, sp)
      000380 88               [ 1]  906 	push	a
      000381 CDr03r87         [ 4]  907 	call	_ssd1306_sendcom
      000384 5B 02            [ 2]  908 	addw	sp, #2
      000386 81               [ 4]  909 	ret
                                    910 ;	oled_ssd1306.c: 36: void ssd1306_sendcom(unsigned char olednum, unsigned char ssd1306com)
                                    911 ;	-----------------------------------------
                                    912 ;	 function ssd1306_sendcom
                                    913 ;	-----------------------------------------
      000387                        914 _ssd1306_sendcom:
                                    915 ;	oled_ssd1306.c: 38: i2c_write_2byte(olednum,commode,ssd1306com); //Send Command
      000387 7B 04            [ 1]  916 	ld	a, (0x04, sp)
      000389 88               [ 1]  917 	push	a
      00038A 4B 00            [ 1]  918 	push	#0x00
      00038C 7B 05            [ 1]  919 	ld	a, (0x05, sp)
      00038E 88               [ 1]  920 	push	a
      00038F CDr01rA6         [ 4]  921 	call	_i2c_write_2byte
      000392 5B 03            [ 2]  922 	addw	sp, #3
      000394 81               [ 4]  923 	ret
                                    924 ;	oled_ssd1306.c: 41: void ssd1306_senddat(unsigned char olednum, unsigned char ssd1306dat)
                                    925 ;	-----------------------------------------
                                    926 ;	 function ssd1306_senddat
                                    927 ;	-----------------------------------------
      000395                        928 _ssd1306_senddat:
                                    929 ;	oled_ssd1306.c: 43: i2c_write_2byte(olednum,datmode,ssd1306dat); //Send Data
      000395 7B 04            [ 1]  930 	ld	a, (0x04, sp)
      000397 88               [ 1]  931 	push	a
      000398 4B 40            [ 1]  932 	push	#0x40
      00039A 7B 05            [ 1]  933 	ld	a, (0x05, sp)
      00039C 88               [ 1]  934 	push	a
      00039D CDr01rA6         [ 4]  935 	call	_i2c_write_2byte
      0003A0 5B 03            [ 2]  936 	addw	sp, #3
      0003A2 81               [ 4]  937 	ret
                                    938 ;	oled_ssd1306.c: 46: void ssd1306_setpos(unsigned char olednum, unsigned char row, unsigned char col)
                                    939 ;	-----------------------------------------
                                    940 ;	 function ssd1306_setpos
                                    941 ;	-----------------------------------------
      0003A3                        942 _ssd1306_setpos:
                                    943 ;	oled_ssd1306.c: 48: ssd1306_sendcom(olednum,(0xB0|(row&0x0F))); //Set page of row
      0003A3 7B 04            [ 1]  944 	ld	a, (0x04, sp)
      0003A5 A4 0F            [ 1]  945 	and	a, #0x0f
      0003A7 AA B0            [ 1]  946 	or	a, #0xb0
      0003A9 88               [ 1]  947 	push	a
      0003AA 7B 04            [ 1]  948 	ld	a, (0x04, sp)
      0003AC 88               [ 1]  949 	push	a
      0003AD CDr03r87         [ 4]  950 	call	_ssd1306_sendcom
      0003B0 5B 02            [ 2]  951 	addw	sp, #2
                                    952 ;	oled_ssd1306.c: 49: ssd1306_sendcom(olednum,(0x00|(col&0x0F))); //Set lower nibble of column
      0003B2 7B 05            [ 1]  953 	ld	a, (0x05, sp)
      0003B4 A4 0F            [ 1]  954 	and	a, #0x0f
      0003B6 88               [ 1]  955 	push	a
      0003B7 7B 04            [ 1]  956 	ld	a, (0x04, sp)
      0003B9 88               [ 1]  957 	push	a
      0003BA CDr03r87         [ 4]  958 	call	_ssd1306_sendcom
      0003BD 5B 02            [ 2]  959 	addw	sp, #2
                                    960 ;	oled_ssd1306.c: 50: ssd1306_sendcom(olednum,(0x10|((col>>4)&0x0F))); //Set upper nibble of column
      0003BF 7B 05            [ 1]  961 	ld	a, (0x05, sp)
      0003C1 4E               [ 1]  962 	swap	a
      0003C2 A4 0F            [ 1]  963 	and	a, #0x0f
      0003C4 A4 0F            [ 1]  964 	and	a, #0x0f
      0003C6 AA 10            [ 1]  965 	or	a, #0x10
      0003C8 88               [ 1]  966 	push	a
      0003C9 7B 04            [ 1]  967 	ld	a, (0x04, sp)
      0003CB 88               [ 1]  968 	push	a
      0003CC CDr03r87         [ 4]  969 	call	_ssd1306_sendcom
      0003CF 5B 02            [ 2]  970 	addw	sp, #2
      0003D1 81               [ 4]  971 	ret
                                    972 ;	oled_ssd1306.c: 53: void ssd1306_clear(unsigned char olednum) 
                                    973 ;	-----------------------------------------
                                    974 ;	 function ssd1306_clear
                                    975 ;	-----------------------------------------
      0003D2                        976 _ssd1306_clear:
      0003D2 52 02            [ 2]  977 	sub	sp, #2
                                    978 ;	oled_ssd1306.c: 56: ssd1306_setpos(olednum,0,0);
      0003D4 4B 00            [ 1]  979 	push	#0x00
      0003D6 4B 00            [ 1]  980 	push	#0x00
      0003D8 7B 07            [ 1]  981 	ld	a, (0x07, sp)
      0003DA 88               [ 1]  982 	push	a
      0003DB CDr03rA3         [ 4]  983 	call	_ssd1306_setpos
      0003DE 5B 03            [ 2]  984 	addw	sp, #3
                                    985 ;	oled_ssd1306.c: 57: for(row=0;row<OLED_ROW+1;row++)	//Scan rows, add 1 row for completely flush.
      0003E0 0F 01            [ 1]  986 	clr	(0x01, sp)
                                    987 ;	oled_ssd1306.c: 59: for(col=0;col<OLED_COL;col++)	//Scan columns
      0003E2                        988 00109$:
      0003E2 0F 02            [ 1]  989 	clr	(0x02, sp)
      0003E4                        990 00103$:
                                    991 ;	oled_ssd1306.c: 61: ssd1306_senddat(olednum,0);	//Send 0 to every pixel
      0003E4 4B 00            [ 1]  992 	push	#0x00
      0003E6 7B 06            [ 1]  993 	ld	a, (0x06, sp)
      0003E8 88               [ 1]  994 	push	a
      0003E9 CDr03r95         [ 4]  995 	call	_ssd1306_senddat
      0003EC 5B 02            [ 2]  996 	addw	sp, #2
                                    997 ;	oled_ssd1306.c: 59: for(col=0;col<OLED_COL;col++)	//Scan columns
      0003EE 0C 02            [ 1]  998 	inc	(0x02, sp)
      0003F0 7B 02            [ 1]  999 	ld	a, (0x02, sp)
      0003F2 A1 80            [ 1] 1000 	cp	a, #0x80
      0003F4 25 EE            [ 1] 1001 	jrc	00103$
                                   1002 ;	oled_ssd1306.c: 57: for(row=0;row<OLED_ROW+1;row++)	//Scan rows, add 1 row for completely flush.
      0003F6 0C 01            [ 1] 1003 	inc	(0x01, sp)
      0003F8 7B 01            [ 1] 1004 	ld	a, (0x01, sp)
      0003FA A1 09            [ 1] 1005 	cp	a, #0x09
      0003FC 25 E4            [ 1] 1006 	jrc	00109$
      0003FE 5B 02            [ 2] 1007 	addw	sp, #2
      000400 81               [ 4] 1008 	ret
                                   1009 ;	oled_ssd1306.c: 66: void OLED_setpos(unsigned char olednum, unsigned char row, unsigned char col)
                                   1010 ;	-----------------------------------------
                                   1011 ;	 function OLED_setpos
                                   1012 ;	-----------------------------------------
      000401                       1013 _OLED_setpos:
                                   1014 ;	oled_ssd1306.c: 68: ssd1306_setpos(olednum,row,col); //Set coordinate (for LCD_drawbyte)
      000401 7B 05            [ 1] 1015 	ld	a, (0x05, sp)
      000403 88               [ 1] 1016 	push	a
      000404 7B 05            [ 1] 1017 	ld	a, (0x05, sp)
      000406 88               [ 1] 1018 	push	a
      000407 7B 05            [ 1] 1019 	ld	a, (0x05, sp)
      000409 88               [ 1] 1020 	push	a
      00040A CDr03rA3         [ 4] 1021 	call	_ssd1306_setpos
      00040D 5B 03            [ 2] 1022 	addw	sp, #3
      00040F 81               [ 4] 1023 	ret
                                   1024 ;	oled_ssd1306.c: 71: void OLED_drawbyte(unsigned char olednum, unsigned char dbyte)
                                   1025 ;	-----------------------------------------
                                   1026 ;	 function OLED_drawbyte
                                   1027 ;	-----------------------------------------
      000410                       1028 _OLED_drawbyte:
                                   1029 ;	oled_ssd1306.c: 73: ssd1306_senddat(olednum,dbyte); //Send 1 byte data only
      000410 7B 04            [ 1] 1030 	ld	a, (0x04, sp)
      000412 88               [ 1] 1031 	push	a
      000413 7B 04            [ 1] 1032 	ld	a, (0x04, sp)
      000415 88               [ 1] 1033 	push	a
      000416 CDr03r95         [ 4] 1034 	call	_ssd1306_senddat
      000419 5B 02            [ 2] 1035 	addw	sp, #2
      00041B 81               [ 4] 1036 	ret
                                   1037 ;	oled_ssd1306.c: 76: void OLED_drawchar(unsigned char olednum, unsigned char chr, unsigned char chrrow, unsigned char chrcol)
                                   1038 ;	-----------------------------------------
                                   1039 ;	 function OLED_drawchar
                                   1040 ;	-----------------------------------------
      00041C                       1041 _OLED_drawchar:
      00041C 52 0B            [ 2] 1042 	sub	sp, #11
                                   1043 ;	oled_ssd1306.c: 81: ssd1306_setpos(olednum,chrrow,chrcol);
      00041E 7B 11            [ 1] 1044 	ld	a, (0x11, sp)
      000420 88               [ 1] 1045 	push	a
      000421 7B 11            [ 1] 1046 	ld	a, (0x11, sp)
      000423 88               [ 1] 1047 	push	a
      000424 7B 10            [ 1] 1048 	ld	a, (0x10, sp)
      000426 88               [ 1] 1049 	push	a
      000427 CDr03rA3         [ 4] 1050 	call	_ssd1306_setpos
      00042A 5B 03            [ 2] 1051 	addw	sp, #3
                                   1052 ;	oled_ssd1306.c: 86: chridx=(chr-32)*5; //Start at character 32 (Space). 5 columns for each character
      00042C 7B 0F            [ 1] 1053 	ld	a, (0x0f, sp)
      00042E 6B 03            [ 1] 1054 	ld	(0x03, sp), a
      000430 0F 02            [ 1] 1055 	clr	(0x02, sp)
                                   1056 ;	oled_ssd1306.c: 83: if((chr>31)&&(chr<128))	//Alphanumeric & Punctuation Area
      000432 7B 0F            [ 1] 1057 	ld	a, (0x0f, sp)
      000434 A1 1F            [ 1] 1058 	cp	a, #0x1f
      000436 23 47            [ 2] 1059 	jrule	00107$
      000438 7B 0F            [ 1] 1060 	ld	a, (0x0f, sp)
      00043A A1 80            [ 1] 1061 	cp	a, #0x80
      00043C 24 41            [ 1] 1062 	jrnc	00107$
                                   1063 ;	oled_ssd1306.c: 85: ssd1306_senddat(olednum,0x00);
      00043E 4B 00            [ 1] 1064 	push	#0x00
      000440 7B 0F            [ 1] 1065 	ld	a, (0x0f, sp)
      000442 88               [ 1] 1066 	push	a
      000443 CDr03r95         [ 4] 1067 	call	_ssd1306_senddat
      000446 5B 02            [ 2] 1068 	addw	sp, #2
                                   1069 ;	oled_ssd1306.c: 86: chridx=(chr-32)*5; //Start at character 32 (Space). 5 columns for each character
      000448 1E 02            [ 2] 1070 	ldw	x, (0x02, sp)
      00044A 1D 00 20         [ 2] 1071 	subw	x, #0x0020
      00044D 89               [ 2] 1072 	pushw	x
      00044E 4B 05            [ 1] 1073 	push	#0x05
      000450 4B 00            [ 1] 1074 	push	#0x00
      000452 CDr00r00         [ 4] 1075 	call	__mulint
      000455 5B 04            [ 2] 1076 	addw	sp, #4
      000457 1F 0A            [ 2] 1077 	ldw	(0x0a, sp), x
                                   1078 ;	oled_ssd1306.c: 87: for(ci=0;ci<5;ci++)
      000459 AEr0ArAC         [ 2] 1079 	ldw	x, #_font_arr+0
      00045C 1F 08            [ 2] 1080 	ldw	(0x08, sp), x
      00045E 0F 01            [ 1] 1081 	clr	(0x01, sp)
      000460                       1082 00110$:
                                   1083 ;	oled_ssd1306.c: 89: fchar = font_arr[chridx+ci]; //Get character pattern from Font Array
      000460 7B 01            [ 1] 1084 	ld	a, (0x01, sp)
      000462 97               [ 1] 1085 	ld	xl, a
      000463 4F               [ 1] 1086 	clr	a
      000464 95               [ 1] 1087 	ld	xh, a
      000465 72 FB 0A         [ 2] 1088 	addw	x, (0x0a, sp)
      000468 72 FB 08         [ 2] 1089 	addw	x, (0x08, sp)
      00046B F6               [ 1] 1090 	ld	a, (x)
                                   1091 ;	oled_ssd1306.c: 90: ssd1306_senddat(olednum,fchar); //Send pattern 1 byte at a time
      00046C 88               [ 1] 1092 	push	a
      00046D 7B 0F            [ 1] 1093 	ld	a, (0x0f, sp)
      00046F 88               [ 1] 1094 	push	a
      000470 CDr03r95         [ 4] 1095 	call	_ssd1306_senddat
      000473 5B 02            [ 2] 1096 	addw	sp, #2
                                   1097 ;	oled_ssd1306.c: 87: for(ci=0;ci<5;ci++)
      000475 0C 01            [ 1] 1098 	inc	(0x01, sp)
      000477 7B 01            [ 1] 1099 	ld	a, (0x01, sp)
      000479 A1 05            [ 1] 1100 	cp	a, #0x05
      00047B 25 E3            [ 1] 1101 	jrc	00110$
      00047D 20 3D            [ 2] 1102 	jra	00114$
      00047F                       1103 00107$:
                                   1104 ;	oled_ssd1306.c: 93: else if((chr>127)&&(chr<148)) //Frame & Arrow Area
      00047F 7B 0F            [ 1] 1105 	ld	a, (0x0f, sp)
      000481 A1 7F            [ 1] 1106 	cp	a, #0x7f
      000483 23 37            [ 2] 1107 	jrule	00114$
      000485 7B 0F            [ 1] 1108 	ld	a, (0x0f, sp)
      000487 A1 94            [ 1] 1109 	cp	a, #0x94
      000489 24 31            [ 1] 1110 	jrnc	00114$
                                   1111 ;	oled_ssd1306.c: 95: chridx=(chr-128)*8; //Start at index 128. 5 columns for each symbol
      00048B 1E 02            [ 2] 1112 	ldw	x, (0x02, sp)
      00048D 1D 00 80         [ 2] 1113 	subw	x, #0x0080
      000490 58               [ 2] 1114 	sllw	x
      000491 58               [ 2] 1115 	sllw	x
      000492 58               [ 2] 1116 	sllw	x
                                   1117 ;	oled_ssd1306.c: 96: for(ci=0;ci<8;ci++)
      000493 90 AEr0ArAC      [ 2] 1118 	ldw	y, #_font_arr+0
      000497 17 06            [ 2] 1119 	ldw	(0x06, sp), y
      000499 1C 01 E0         [ 2] 1120 	addw	x, #0x01e0
      00049C 1F 04            [ 2] 1121 	ldw	(0x04, sp), x
      00049E 0F 01            [ 1] 1122 	clr	(0x01, sp)
      0004A0                       1123 00112$:
                                   1124 ;	oled_ssd1306.c: 98: fchar = font_arr[chridx+480+ci]; //Get symbol pattern from Font Array
      0004A0 5F               [ 1] 1125 	clrw	x
      0004A1 7B 01            [ 1] 1126 	ld	a, (0x01, sp)
      0004A3 97               [ 1] 1127 	ld	xl, a
      0004A4 72 FB 04         [ 2] 1128 	addw	x, (0x04, sp)
      0004A7 72 FB 06         [ 2] 1129 	addw	x, (0x06, sp)
      0004AA F6               [ 1] 1130 	ld	a, (x)
                                   1131 ;	oled_ssd1306.c: 99: ssd1306_senddat(olednum,fchar); //Send pattern 1 byte at a time		   
      0004AB 88               [ 1] 1132 	push	a
      0004AC 7B 0F            [ 1] 1133 	ld	a, (0x0f, sp)
      0004AE 88               [ 1] 1134 	push	a
      0004AF CDr03r95         [ 4] 1135 	call	_ssd1306_senddat
      0004B2 5B 02            [ 2] 1136 	addw	sp, #2
                                   1137 ;	oled_ssd1306.c: 96: for(ci=0;ci<8;ci++)
      0004B4 0C 01            [ 1] 1138 	inc	(0x01, sp)
      0004B6 7B 01            [ 1] 1139 	ld	a, (0x01, sp)
      0004B8 A1 08            [ 1] 1140 	cp	a, #0x08
      0004BA 25 E4            [ 1] 1141 	jrc	00112$
      0004BC                       1142 00114$:
      0004BC 5B 0B            [ 2] 1143 	addw	sp, #11
      0004BE 81               [ 4] 1144 	ret
                                   1145 ;	oled_ssd1306.c: 105: void OLED_drawtext(unsigned char olednum, unsigned char *text, unsigned char txtrow, unsigned char txtcol)
                                   1146 ;	-----------------------------------------
                                   1147 ;	 function OLED_drawtext
                                   1148 ;	-----------------------------------------
      0004BF                       1149 _OLED_drawtext:
      0004BF 52 02            [ 2] 1150 	sub	sp, #2
                                   1151 ;	oled_ssd1306.c: 109: while(text[stridx] != 0) //Scan characters in string
      0004C1 5F               [ 1] 1152 	clrw	x
      0004C2 1F 01            [ 2] 1153 	ldw	(0x01, sp), x
      0004C4                       1154 00101$:
      0004C4 1E 06            [ 2] 1155 	ldw	x, (0x06, sp)
      0004C6 72 FB 01         [ 2] 1156 	addw	x, (0x01, sp)
      0004C9 F6               [ 1] 1157 	ld	a, (x)
      0004CA 97               [ 1] 1158 	ld	xl, a
      0004CB 4D               [ 1] 1159 	tnz	a
      0004CC 27 1C            [ 1] 1160 	jreq	00104$
                                   1161 ;	oled_ssd1306.c: 111: OLED_drawchar(olednum,text[stridx],txtrow,txtcol+(8*stridx)); //Display each character
      0004CE 7B 02            [ 1] 1162 	ld	a, (0x02, sp)
      0004D0 48               [ 1] 1163 	sll	a
      0004D1 48               [ 1] 1164 	sll	a
      0004D2 48               [ 1] 1165 	sll	a
      0004D3 1B 09            [ 1] 1166 	add	a, (0x09, sp)
      0004D5 88               [ 1] 1167 	push	a
      0004D6 7B 09            [ 1] 1168 	ld	a, (0x09, sp)
      0004D8 88               [ 1] 1169 	push	a
      0004D9 9F               [ 1] 1170 	ld	a, xl
      0004DA 88               [ 1] 1171 	push	a
      0004DB 7B 08            [ 1] 1172 	ld	a, (0x08, sp)
      0004DD 88               [ 1] 1173 	push	a
      0004DE CDr04r1C         [ 4] 1174 	call	_OLED_drawchar
      0004E1 5B 04            [ 2] 1175 	addw	sp, #4
                                   1176 ;	oled_ssd1306.c: 112: stridx++;
      0004E3 1E 01            [ 2] 1177 	ldw	x, (0x01, sp)
      0004E5 5C               [ 2] 1178 	incw	x
      0004E6 1F 01            [ 2] 1179 	ldw	(0x01, sp), x
      0004E8 20 DA            [ 2] 1180 	jra	00101$
      0004EA                       1181 00104$:
      0004EA 5B 02            [ 2] 1182 	addw	sp, #2
      0004EC 81               [ 4] 1183 	ret
                                   1184 ;	oled_ssd1306.c: 116: void OLED_drawint(unsigned char olednum, unsigned int num, unsigned char numrow, unsigned char numcol)
                                   1185 ;	-----------------------------------------
                                   1186 ;	 function OLED_drawint
                                   1187 ;	-----------------------------------------
      0004ED                       1188 _OLED_drawint:
      0004ED 52 0C            [ 2] 1189 	sub	sp, #12
                                   1190 ;	oled_ssd1306.c: 123: numb = num;
      0004EF 1E 10            [ 2] 1191 	ldw	x, (0x10, sp)
                                   1192 ;	oled_ssd1306.c: 124: while(numb!=0) //Counting digit
      0004F1 4F               [ 1] 1193 	clr	a
      0004F2                       1194 00101$:
      0004F2 5D               [ 2] 1195 	tnzw	x
      0004F3 27 08            [ 1] 1196 	jreq	00114$
                                   1197 ;	oled_ssd1306.c: 126: ndigit++;
      0004F5 4C               [ 1] 1198 	inc	a
                                   1199 ;	oled_ssd1306.c: 127: numb /= 10;	
      0004F6 90 AE 00 0A      [ 2] 1200 	ldw	y, #0x000a
      0004FA 65               [ 2] 1201 	divw	x, y
      0004FB 20 F5            [ 2] 1202 	jra	00101$
      0004FD                       1203 00114$:
      0004FD 6B 0B            [ 1] 1204 	ld	(0x0b, sp), a
                                   1205 ;	oled_ssd1306.c: 129: for(nd=0;nd<ndigit;nd++) //Converting each digit
      0004FF 4F               [ 1] 1206 	clr	a
      000500 96               [ 1] 1207 	ldw	x, sp
      000501 5C               [ 2] 1208 	incw	x
      000502 1F 09            [ 2] 1209 	ldw	(0x09, sp), x
      000504                       1210 00106$:
      000504 11 0B            [ 1] 1211 	cp	a, (0x0b, sp)
      000506 24 27            [ 1] 1212 	jrnc	00104$
                                   1213 ;	oled_ssd1306.c: 131: numb = num%10;
      000508 1E 10            [ 2] 1214 	ldw	x, (0x10, sp)
      00050A 90 AE 00 0A      [ 2] 1215 	ldw	y, #0x000a
      00050E 65               [ 2] 1216 	divw	x, y
      00050F 17 07            [ 2] 1217 	ldw	(0x07, sp), y
                                   1218 ;	oled_ssd1306.c: 132: num = num/10;
      000511 1E 10            [ 2] 1219 	ldw	x, (0x10, sp)
      000513 90 AE 00 0A      [ 2] 1220 	ldw	y, #0x000a
      000517 65               [ 2] 1221 	divw	x, y
      000518 1F 10            [ 2] 1222 	ldw	(0x10, sp), x
                                   1223 ;	oled_ssd1306.c: 133: ibuff[ndigit-(nd+1)] = numb + '0'; //Start from last_index-1
      00051A 4C               [ 1] 1224 	inc	a
      00051B 6B 0C            [ 1] 1225 	ld	(0x0c, sp), a
      00051D 7B 0B            [ 1] 1226 	ld	a, (0x0b, sp)
      00051F 10 0C            [ 1] 1227 	sub	a, (0x0c, sp)
      000521 5F               [ 1] 1228 	clrw	x
      000522 97               [ 1] 1229 	ld	xl, a
      000523 72 FB 09         [ 2] 1230 	addw	x, (0x09, sp)
      000526 7B 08            [ 1] 1231 	ld	a, (0x08, sp)
      000528 AB 30            [ 1] 1232 	add	a, #0x30
      00052A F7               [ 1] 1233 	ld	(x), a
                                   1234 ;	oled_ssd1306.c: 129: for(nd=0;nd<ndigit;nd++) //Converting each digit
      00052B 7B 0C            [ 1] 1235 	ld	a, (0x0c, sp)
      00052D 20 D5            [ 2] 1236 	jra	00106$
      00052F                       1237 00104$:
                                   1238 ;	oled_ssd1306.c: 135: ibuff[ndigit] = '\0'; //Last character is null
      00052F 5F               [ 1] 1239 	clrw	x
      000530 7B 0B            [ 1] 1240 	ld	a, (0x0b, sp)
      000532 97               [ 1] 1241 	ld	xl, a
      000533 72 FB 09         [ 2] 1242 	addw	x, (0x09, sp)
      000536 7F               [ 1] 1243 	clr	(x)
                                   1244 ;	oled_ssd1306.c: 137: OLED_drawtext(olednum,ibuff,numrow,numcol); //Display number as text
      000537 1E 09            [ 2] 1245 	ldw	x, (0x09, sp)
      000539 7B 13            [ 1] 1246 	ld	a, (0x13, sp)
      00053B 88               [ 1] 1247 	push	a
      00053C 7B 13            [ 1] 1248 	ld	a, (0x13, sp)
      00053E 88               [ 1] 1249 	push	a
      00053F 89               [ 2] 1250 	pushw	x
      000540 7B 13            [ 1] 1251 	ld	a, (0x13, sp)
      000542 88               [ 1] 1252 	push	a
      000543 CDr04rBF         [ 4] 1253 	call	_OLED_drawtext
      000546 5B 11            [ 2] 1254 	addw	sp, #17
      000548 81               [ 4] 1255 	ret
                                   1256 ;	oled_ssd1306.c: 140: void OLED_clear(unsigned char olednum)
                                   1257 ;	-----------------------------------------
                                   1258 ;	 function OLED_clear
                                   1259 ;	-----------------------------------------
      000549                       1260 _OLED_clear:
                                   1261 ;	oled_ssd1306.c: 142: ssd1306_sendcom(olednum,0xAE); //Set Display off
      000549 4B AE            [ 1] 1262 	push	#0xae
      00054B 7B 04            [ 1] 1263 	ld	a, (0x04, sp)
      00054D 88               [ 1] 1264 	push	a
      00054E CDr03r87         [ 4] 1265 	call	_ssd1306_sendcom
      000551 5B 02            [ 2] 1266 	addw	sp, #2
                                   1267 ;	oled_ssd1306.c: 143: ssd1306_clear(olednum); //Clear Display
      000553 7B 03            [ 1] 1268 	ld	a, (0x03, sp)
      000555 88               [ 1] 1269 	push	a
      000556 CDr03rD2         [ 4] 1270 	call	_ssd1306_clear
      000559 84               [ 1] 1271 	pop	a
                                   1272 ;	oled_ssd1306.c: 144: ssd1306_sendcom(olednum,0xAF); //Set Display on
      00055A 4B AF            [ 1] 1273 	push	#0xaf
      00055C 7B 04            [ 1] 1274 	ld	a, (0x04, sp)
      00055E 88               [ 1] 1275 	push	a
      00055F CDr03r87         [ 4] 1276 	call	_ssd1306_sendcom
      000562 5B 02            [ 2] 1277 	addw	sp, #2
      000564 81               [ 4] 1278 	ret
                                   1279 ;	oled_ssd1306.c: 147: void OLED_clearblock(unsigned char olednum, unsigned char row, unsigned char col_start, unsigned char col_fin)
                                   1280 ;	-----------------------------------------
                                   1281 ;	 function OLED_clearblock
                                   1282 ;	-----------------------------------------
      000565                       1283 _OLED_clearblock:
      000565 88               [ 1] 1284 	push	a
                                   1285 ;	oled_ssd1306.c: 151: ssd1306_setpos(olednum,row,col_start); 	//Set start position
      000566 7B 06            [ 1] 1286 	ld	a, (0x06, sp)
      000568 88               [ 1] 1287 	push	a
      000569 7B 06            [ 1] 1288 	ld	a, (0x06, sp)
      00056B 88               [ 1] 1289 	push	a
      00056C 7B 06            [ 1] 1290 	ld	a, (0x06, sp)
      00056E 88               [ 1] 1291 	push	a
      00056F CDr03rA3         [ 4] 1292 	call	_ssd1306_setpos
      000572 5B 03            [ 2] 1293 	addw	sp, #3
                                   1294 ;	oled_ssd1306.c: 152: for(col=col_start;col<=col_fin;col++) 	//Scan columns
      000574 7B 06            [ 1] 1295 	ld	a, (0x06, sp)
      000576 6B 01            [ 1] 1296 	ld	(0x01, sp), a
      000578                       1297 00103$:
      000578 7B 01            [ 1] 1298 	ld	a, (0x01, sp)
      00057A 11 07            [ 1] 1299 	cp	a, (0x07, sp)
      00057C 22 0E            [ 1] 1300 	jrugt	00105$
                                   1301 ;	oled_ssd1306.c: 154: ssd1306_senddat(olednum,0);	//Send 0 to every pixel in a column
      00057E 4B 00            [ 1] 1302 	push	#0x00
      000580 7B 05            [ 1] 1303 	ld	a, (0x05, sp)
      000582 88               [ 1] 1304 	push	a
      000583 CDr03r95         [ 4] 1305 	call	_ssd1306_senddat
      000586 5B 02            [ 2] 1306 	addw	sp, #2
                                   1307 ;	oled_ssd1306.c: 152: for(col=col_start;col<=col_fin;col++) 	//Scan columns
      000588 0C 01            [ 1] 1308 	inc	(0x01, sp)
      00058A 20 EC            [ 2] 1309 	jra	00103$
      00058C                       1310 00105$:
      00058C 84               [ 1] 1311 	pop	a
      00058D 81               [ 4] 1312 	ret
                                   1313 ;	oled_ssd1306.c: 158: void OLED_normal(unsigned char olednum)
                                   1314 ;	-----------------------------------------
                                   1315 ;	 function OLED_normal
                                   1316 ;	-----------------------------------------
      00058E                       1317 _OLED_normal:
                                   1318 ;	oled_ssd1306.c: 160: ssd1306_sendcom(olednum,0xA6);	//On Pixel in Off Background
      00058E 4B A6            [ 1] 1319 	push	#0xa6
      000590 7B 04            [ 1] 1320 	ld	a, (0x04, sp)
      000592 88               [ 1] 1321 	push	a
      000593 CDr03r87         [ 4] 1322 	call	_ssd1306_sendcom
      000596 5B 02            [ 2] 1323 	addw	sp, #2
      000598 81               [ 4] 1324 	ret
                                   1325 ;	oled_ssd1306.c: 163: void OLED_reverse(unsigned char olednum)
                                   1326 ;	-----------------------------------------
                                   1327 ;	 function OLED_reverse
                                   1328 ;	-----------------------------------------
      000599                       1329 _OLED_reverse:
                                   1330 ;	oled_ssd1306.c: 165: ssd1306_sendcom(olednum,0xA7);	//Off Pixel in On Background
      000599 4B A7            [ 1] 1331 	push	#0xa7
      00059B 7B 04            [ 1] 1332 	ld	a, (0x04, sp)
      00059D 88               [ 1] 1333 	push	a
      00059E CDr03r87         [ 4] 1334 	call	_ssd1306_sendcom
      0005A1 5B 02            [ 2] 1335 	addw	sp, #2
      0005A3 81               [ 4] 1336 	ret
                                   1337 ;	main.c: 28: int main()
                                   1338 ;	-----------------------------------------
                                   1339 ;	 function main
                                   1340 ;	-----------------------------------------
      0005A4                       1341 _main:
                                   1342 ;	main.c: 30: clock_init();
      0005A4 CDr00rAF         [ 4] 1343 	call	_clock_init
                                   1344 ;	main.c: 31: delay_init();
      0005A7 CDr00r00         [ 4] 1345 	call	_delay_init
                                   1346 ;	main.c: 32: gpio_init();
      0005AA CDr06rEF         [ 4] 1347 	call	_gpio_init
                                   1348 ;	main.c: 33: i2c_init();
      0005AD CDr00rB8         [ 4] 1349 	call	_i2c_init
                                   1350 ;	main.c: 35: ssd1306_init(OLED1);
      0005B0 4B 3C            [ 1] 1351 	push	#0x3c
      0005B2 CDr02r8C         [ 4] 1352 	call	_ssd1306_init
      0005B5 84               [ 1] 1353 	pop	a
                                   1354 ;	main.c: 36: ssd1306_init(OLED2);
      0005B6 4B 3D            [ 1] 1355 	push	#0x3d
      0005B8 CDr02r8C         [ 4] 1356 	call	_ssd1306_init
      0005BB 84               [ 1] 1357 	pop	a
                                   1358 ;	main.c: 37: OLED_clear(OLED1);
      0005BC 4B 3C            [ 1] 1359 	push	#0x3c
      0005BE CDr05r49         [ 4] 1360 	call	_OLED_clear
      0005C1 84               [ 1] 1361 	pop	a
                                   1362 ;	main.c: 38: OLED_clear(OLED2);
      0005C2 4B 3D            [ 1] 1363 	push	#0x3d
      0005C4 CDr05r49         [ 4] 1364 	call	_OLED_clear
      0005C7 84               [ 1] 1365 	pop	a
                                   1366 ;	main.c: 40: drawLoadingBar(OLED1);
      0005C8 4B 3C            [ 1] 1367 	push	#0x3c
      0005CA CDr0Ar64         [ 4] 1368 	call	_drawLoadingBar
      0005CD 84               [ 1] 1369 	pop	a
                                   1370 ;	main.c: 41: drawLoadingBar(OLED2);
      0005CE 4B 3D            [ 1] 1371 	push	#0x3d
      0005D0 CDr0Ar64         [ 4] 1372 	call	_drawLoadingBar
      0005D3 84               [ 1] 1373 	pop	a
                                   1374 ;	main.c: 43: loop();
      0005D4 CDr05rD9         [ 4] 1375 	call	_loop
                                   1376 ;	main.c: 44: return 0;
      0005D7 5F               [ 1] 1377 	clrw	x
      0005D8 81               [ 4] 1378 	ret
                                   1379 ;	main.c: 50: void loop()
                                   1380 ;	-----------------------------------------
                                   1381 ;	 function loop
                                   1382 ;	-----------------------------------------
      0005D9                       1383 _loop:
                                   1384 ;	main.c: 52: while(OLED1)
      0005D9                       1385 00102$:
                                   1386 ;	main.c: 54: drawBytes(OLED1);
      0005D9 4B 3C            [ 1] 1387 	push	#0x3c
      0005DB CDr09rE5         [ 4] 1388 	call	_drawBytes
      0005DE 84               [ 1] 1389 	pop	a
                                   1390 ;	main.c: 55: delay_ms(1000);
      0005DF 4B E8            [ 1] 1391 	push	#0xe8
      0005E1 4B 03            [ 1] 1392 	push	#0x03
      0005E3 5F               [ 1] 1393 	clrw	x
      0005E4 89               [ 2] 1394 	pushw	x
      0005E5 CDr00r55         [ 4] 1395 	call	_delay_ms
      0005E8 5B 04            [ 2] 1396 	addw	sp, #4
                                   1397 ;	main.c: 56: OLED_clearblock(OLED1,3,5,114); //Finish column = 5 + 11*10 - 1
      0005EA 4B 72            [ 1] 1398 	push	#0x72
      0005EC 4B 05            [ 1] 1399 	push	#0x05
      0005EE 4B 03            [ 1] 1400 	push	#0x03
      0005F0 4B 3C            [ 1] 1401 	push	#0x3c
      0005F2 CDr05r65         [ 4] 1402 	call	_OLED_clearblock
      0005F5 5B 04            [ 2] 1403 	addw	sp, #4
                                   1404 ;	main.c: 57: delay_ms(500);
      0005F7 4B F4            [ 1] 1405 	push	#0xf4
      0005F9 4B 01            [ 1] 1406 	push	#0x01
      0005FB 5F               [ 1] 1407 	clrw	x
      0005FC 89               [ 2] 1408 	pushw	x
      0005FD CDr00r55         [ 4] 1409 	call	_delay_ms
      000600 5B 04            [ 2] 1410 	addw	sp, #4
                                   1411 ;	main.c: 58: OLED_clearblock(OLED1,5,3,114); //Finish column = 3 + 8*14 - 1
      000602 4B 72            [ 1] 1412 	push	#0x72
      000604 4B 03            [ 1] 1413 	push	#0x03
      000606 4B 05            [ 1] 1414 	push	#0x05
      000608 4B 3C            [ 1] 1415 	push	#0x3c
      00060A CDr05r65         [ 4] 1416 	call	_OLED_clearblock
      00060D 5B 04            [ 2] 1417 	addw	sp, #4
                                   1418 ;	main.c: 59: delay_ms(500);
      00060F 4B F4            [ 1] 1419 	push	#0xf4
      000611 4B 01            [ 1] 1420 	push	#0x01
      000613 5F               [ 1] 1421 	clrw	x
      000614 89               [ 2] 1422 	pushw	x
      000615 CDr00r55         [ 4] 1423 	call	_delay_ms
      000618 5B 04            [ 2] 1424 	addw	sp, #4
                                   1425 ;	main.c: 61: drawInt(OLED2);
      00061A 4B 3D            [ 1] 1426 	push	#0x3d
      00061C CDr06rF0         [ 4] 1427 	call	_drawInt
      00061F 84               [ 1] 1428 	pop	a
                                   1429 ;	main.c: 62: delay_ms(1000); 
      000620 4B E8            [ 1] 1430 	push	#0xe8
      000622 4B 03            [ 1] 1431 	push	#0x03
      000624 5F               [ 1] 1432 	clrw	x
      000625 89               [ 2] 1433 	pushw	x
      000626 CDr00r55         [ 4] 1434 	call	_delay_ms
      000629 5B 04            [ 2] 1435 	addw	sp, #4
                                   1436 ;	main.c: 63: OLED_clear(OLED2);
      00062B 4B 3D            [ 1] 1437 	push	#0x3d
      00062D CDr05r49         [ 4] 1438 	call	_OLED_clear
      000630 84               [ 1] 1439 	pop	a
                                   1440 ;	main.c: 65: drawAlphanum(OLED1);
      000631 4B 3C            [ 1] 1441 	push	#0x3c
      000633 CDr07r7D         [ 4] 1442 	call	_drawAlphanum
      000636 84               [ 1] 1443 	pop	a
                                   1444 ;	main.c: 66: delay_ms(1000); 
      000637 4B E8            [ 1] 1445 	push	#0xe8
      000639 4B 03            [ 1] 1446 	push	#0x03
      00063B 5F               [ 1] 1447 	clrw	x
      00063C 89               [ 2] 1448 	pushw	x
      00063D CDr00r55         [ 4] 1449 	call	_delay_ms
      000640 5B 04            [ 2] 1450 	addw	sp, #4
                                   1451 ;	main.c: 67: OLED_reverse(OLED1);
      000642 4B 3C            [ 1] 1452 	push	#0x3c
      000644 CDr05r99         [ 4] 1453 	call	_OLED_reverse
      000647 84               [ 1] 1454 	pop	a
                                   1455 ;	main.c: 68: delay_ms(1000);
      000648 4B E8            [ 1] 1456 	push	#0xe8
      00064A 4B 03            [ 1] 1457 	push	#0x03
      00064C 5F               [ 1] 1458 	clrw	x
      00064D 89               [ 2] 1459 	pushw	x
      00064E CDr00r55         [ 4] 1460 	call	_delay_ms
      000651 5B 04            [ 2] 1461 	addw	sp, #4
                                   1462 ;	main.c: 69: OLED_clear(OLED1);
      000653 4B 3C            [ 1] 1463 	push	#0x3c
      000655 CDr05r49         [ 4] 1464 	call	_OLED_clear
      000658 84               [ 1] 1465 	pop	a
                                   1466 ;	main.c: 70: OLED_normal(OLED1);
      000659 4B 3C            [ 1] 1467 	push	#0x3c
      00065B CDr05r8E         [ 4] 1468 	call	_OLED_normal
      00065E 84               [ 1] 1469 	pop	a
                                   1470 ;	main.c: 72: drawPunct(OLED2);
      00065F 4B 3D            [ 1] 1471 	push	#0x3d
      000661 CDr07rDE         [ 4] 1472 	call	_drawPunct
      000664 84               [ 1] 1473 	pop	a
                                   1474 ;	main.c: 73: delay_ms(1000); 
      000665 4B E8            [ 1] 1475 	push	#0xe8
      000667 4B 03            [ 1] 1476 	push	#0x03
      000669 5F               [ 1] 1477 	clrw	x
      00066A 89               [ 2] 1478 	pushw	x
      00066B CDr00r55         [ 4] 1479 	call	_delay_ms
      00066E 5B 04            [ 2] 1480 	addw	sp, #4
                                   1481 ;	main.c: 74: OLED_reverse(OLED2);
      000670 4B 3D            [ 1] 1482 	push	#0x3d
      000672 CDr05r99         [ 4] 1483 	call	_OLED_reverse
      000675 84               [ 1] 1484 	pop	a
                                   1485 ;	main.c: 75: delay_ms(1000);
      000676 4B E8            [ 1] 1486 	push	#0xe8
      000678 4B 03            [ 1] 1487 	push	#0x03
      00067A 5F               [ 1] 1488 	clrw	x
      00067B 89               [ 2] 1489 	pushw	x
      00067C CDr00r55         [ 4] 1490 	call	_delay_ms
      00067F 5B 04            [ 2] 1491 	addw	sp, #4
                                   1492 ;	main.c: 76: OLED_clear(OLED2);
      000681 4B 3D            [ 1] 1493 	push	#0x3d
      000683 CDr05r49         [ 4] 1494 	call	_OLED_clear
      000686 84               [ 1] 1495 	pop	a
                                   1496 ;	main.c: 77: OLED_normal(OLED2);
      000687 4B 3D            [ 1] 1497 	push	#0x3d
      000689 CDr05r8E         [ 4] 1498 	call	_OLED_normal
      00068C 84               [ 1] 1499 	pop	a
                                   1500 ;	main.c: 79: drawFrame(OLED1);
      00068D 4B 3C            [ 1] 1501 	push	#0x3c
      00068F CDr08r1F         [ 4] 1502 	call	_drawFrame
      000692 84               [ 1] 1503 	pop	a
                                   1504 ;	main.c: 80: delay_ms(700); 
      000693 4B BC            [ 1] 1505 	push	#0xbc
      000695 4B 02            [ 1] 1506 	push	#0x02
      000697 5F               [ 1] 1507 	clrw	x
      000698 89               [ 2] 1508 	pushw	x
      000699 CDr00r55         [ 4] 1509 	call	_delay_ms
      00069C 5B 04            [ 2] 1510 	addw	sp, #4
                                   1511 ;	main.c: 81: OLED_clearblock(OLED1,3,36,43); //Finish column = 36 + 8 - 1
      00069E 4B 2B            [ 1] 1512 	push	#0x2b
      0006A0 4B 24            [ 1] 1513 	push	#0x24
      0006A2 4B 03            [ 1] 1514 	push	#0x03
      0006A4 4B 3C            [ 1] 1515 	push	#0x3c
      0006A6 CDr05r65         [ 4] 1516 	call	_OLED_clearblock
      0006A9 5B 04            [ 2] 1517 	addw	sp, #4
                                   1518 ;	main.c: 82: delay_ms(700);
      0006AB 4B BC            [ 1] 1519 	push	#0xbc
      0006AD 4B 02            [ 1] 1520 	push	#0x02
      0006AF 5F               [ 1] 1521 	clrw	x
      0006B0 89               [ 2] 1522 	pushw	x
      0006B1 CDr00r55         [ 4] 1523 	call	_delay_ms
      0006B4 5B 04            [ 2] 1524 	addw	sp, #4
                                   1525 ;	main.c: 83: OLED_clear(OLED1);
      0006B6 4B 3C            [ 1] 1526 	push	#0x3c
      0006B8 CDr05r49         [ 4] 1527 	call	_OLED_clear
      0006BB 84               [ 1] 1528 	pop	a
                                   1529 ;	main.c: 85: drawArrow(OLED2);
      0006BC 4B 3D            [ 1] 1530 	push	#0x3d
      0006BE CDr09r56         [ 4] 1531 	call	_drawArrow
      0006C1 84               [ 1] 1532 	pop	a
                                   1533 ;	main.c: 86: delay_ms(700); 
      0006C2 4B BC            [ 1] 1534 	push	#0xbc
      0006C4 4B 02            [ 1] 1535 	push	#0x02
      0006C6 5F               [ 1] 1536 	clrw	x
      0006C7 89               [ 2] 1537 	pushw	x
      0006C8 CDr00r55         [ 4] 1538 	call	_delay_ms
      0006CB 5B 04            [ 2] 1539 	addw	sp, #4
                                   1540 ;	main.c: 87: OLED_clearblock(OLED2,3,36,43); //Finish column = 36 + 8 - 1
      0006CD 4B 2B            [ 1] 1541 	push	#0x2b
      0006CF 4B 24            [ 1] 1542 	push	#0x24
      0006D1 4B 03            [ 1] 1543 	push	#0x03
      0006D3 4B 3D            [ 1] 1544 	push	#0x3d
      0006D5 CDr05r65         [ 4] 1545 	call	_OLED_clearblock
      0006D8 5B 04            [ 2] 1546 	addw	sp, #4
                                   1547 ;	main.c: 88: delay_ms(700);
      0006DA 4B BC            [ 1] 1548 	push	#0xbc
      0006DC 4B 02            [ 1] 1549 	push	#0x02
      0006DE 5F               [ 1] 1550 	clrw	x
      0006DF 89               [ 2] 1551 	pushw	x
      0006E0 CDr00r55         [ 4] 1552 	call	_delay_ms
      0006E3 5B 04            [ 2] 1553 	addw	sp, #4
                                   1554 ;	main.c: 89: OLED_clear(OLED2);
      0006E5 4B 3D            [ 1] 1555 	push	#0x3d
      0006E7 CDr05r49         [ 4] 1556 	call	_OLED_clear
      0006EA 84               [ 1] 1557 	pop	a
      0006EB CCr05rD9         [ 2] 1558 	jp	00102$
      0006EE 81               [ 4] 1559 	ret
                                   1560 ;	main.c: 94: void gpio_init()
                                   1561 ;	-----------------------------------------
                                   1562 ;	 function gpio_init
                                   1563 ;	-----------------------------------------
      0006EF                       1564 _gpio_init:
                                   1565 ;	main.c: 97: }
      0006EF 81               [ 4] 1566 	ret
                                   1567 ;	main.c: 99: void drawInt(unsigned char olednum)
                                   1568 ;	-----------------------------------------
                                   1569 ;	 function drawInt
                                   1570 ;	-----------------------------------------
      0006F0                       1571 _drawInt:
                                   1572 ;	main.c: 101: OLED_drawint(olednum, 64, 0, 8);   //Decimal
      0006F0 4B 08            [ 1] 1573 	push	#0x08
      0006F2 4B 00            [ 1] 1574 	push	#0x00
      0006F4 4B 40            [ 1] 1575 	push	#0x40
      0006F6 4B 00            [ 1] 1576 	push	#0x00
      0006F8 7B 07            [ 1] 1577 	ld	a, (0x07, sp)
      0006FA 88               [ 1] 1578 	push	a
      0006FB CDr04rED         [ 4] 1579 	call	_OLED_drawint
      0006FE 5B 05            [ 2] 1580 	addw	sp, #5
                                   1581 ;	main.c: 102: OLED_drawint(olednum, 064, 0, 48); //Octal displayed as Decimal
      000700 4B 30            [ 1] 1582 	push	#0x30
      000702 4B 00            [ 1] 1583 	push	#0x00
      000704 4B 34            [ 1] 1584 	push	#0x34
      000706 4B 00            [ 1] 1585 	push	#0x00
      000708 7B 07            [ 1] 1586 	ld	a, (0x07, sp)
      00070A 88               [ 1] 1587 	push	a
      00070B CDr04rED         [ 4] 1588 	call	_OLED_drawint
      00070E 5B 05            [ 2] 1589 	addw	sp, #5
                                   1590 ;	main.c: 103: OLED_drawint(olednum, 0x64, 0, 88); //Hexadecimal displayed as Decimal
      000710 4B 58            [ 1] 1591 	push	#0x58
      000712 4B 00            [ 1] 1592 	push	#0x00
      000714 4B 64            [ 1] 1593 	push	#0x64
      000716 4B 00            [ 1] 1594 	push	#0x00
      000718 7B 07            [ 1] 1595 	ld	a, (0x07, sp)
      00071A 88               [ 1] 1596 	push	a
      00071B CDr04rED         [ 4] 1597 	call	_OLED_drawint
      00071E 5B 05            [ 2] 1598 	addw	sp, #5
                                   1599 ;	main.c: 105: OLED_drawint(olednum, -64, 1, 8); //Negative number is not supported
      000720 4B 08            [ 1] 1600 	push	#0x08
      000722 4B 01            [ 1] 1601 	push	#0x01
      000724 4B C0            [ 1] 1602 	push	#0xc0
      000726 4B FF            [ 1] 1603 	push	#0xff
      000728 7B 07            [ 1] 1604 	ld	a, (0x07, sp)
      00072A 88               [ 1] 1605 	push	a
      00072B CDr04rED         [ 4] 1606 	call	_OLED_drawint
      00072E 5B 05            [ 2] 1607 	addw	sp, #5
                                   1608 ;	main.c: 108: OLED_drawint(olednum, 65535, 3, 8); //Max. is 65535
      000730 4B 08            [ 1] 1609 	push	#0x08
      000732 4B 03            [ 1] 1610 	push	#0x03
      000734 4B FF            [ 1] 1611 	push	#0xff
      000736 4B FF            [ 1] 1612 	push	#0xff
      000738 7B 07            [ 1] 1613 	ld	a, (0x07, sp)
      00073A 88               [ 1] 1614 	push	a
      00073B CDr04rED         [ 4] 1615 	call	_OLED_drawint
      00073E 5B 05            [ 2] 1616 	addw	sp, #5
                                   1617 ;	main.c: 110: OLED_drawint(olednum, 100, 5, 8);
      000740 4B 08            [ 1] 1618 	push	#0x08
      000742 4B 05            [ 1] 1619 	push	#0x05
      000744 4B 64            [ 1] 1620 	push	#0x64
      000746 4B 00            [ 1] 1621 	push	#0x00
      000748 7B 07            [ 1] 1622 	ld	a, (0x07, sp)
      00074A 88               [ 1] 1623 	push	a
      00074B CDr04rED         [ 4] 1624 	call	_OLED_drawint
      00074E 5B 05            [ 2] 1625 	addw	sp, #5
                                   1626 ;	main.c: 111: OLED_drawchar(olednum, SYM_DEGREE, 5, 32);
      000750 4B 20            [ 1] 1627 	push	#0x20
      000752 4B 05            [ 1] 1628 	push	#0x05
      000754 4B 7F            [ 1] 1629 	push	#0x7f
      000756 7B 06            [ 1] 1630 	ld	a, (0x06, sp)
      000758 88               [ 1] 1631 	push	a
      000759 CDr04r1C         [ 4] 1632 	call	_OLED_drawchar
      00075C 5B 04            [ 2] 1633 	addw	sp, #4
                                   1634 ;	main.c: 112: OLED_drawchar(olednum, 'C', 5, 40);
      00075E 4B 28            [ 1] 1635 	push	#0x28
      000760 4B 05            [ 1] 1636 	push	#0x05
      000762 4B 43            [ 1] 1637 	push	#0x43
      000764 7B 06            [ 1] 1638 	ld	a, (0x06, sp)
      000766 88               [ 1] 1639 	push	a
      000767 CDr04r1C         [ 4] 1640 	call	_OLED_drawchar
      00076A 5B 04            [ 2] 1641 	addw	sp, #4
                                   1642 ;	main.c: 114: OLED_drawtext(olednum, " OLED TEST : INT",7,0);
      00076C AEr0Dr2C         [ 2] 1643 	ldw	x, #___str_0+0
      00076F 4B 00            [ 1] 1644 	push	#0x00
      000771 4B 07            [ 1] 1645 	push	#0x07
      000773 89               [ 2] 1646 	pushw	x
      000774 7B 07            [ 1] 1647 	ld	a, (0x07, sp)
      000776 88               [ 1] 1648 	push	a
      000777 CDr04rBF         [ 4] 1649 	call	_OLED_drawtext
      00077A 5B 05            [ 2] 1650 	addw	sp, #5
      00077C 81               [ 4] 1651 	ret
                                   1652 ;	main.c: 117: void drawAlphanum(unsigned char olednum)
                                   1653 ;	-----------------------------------------
                                   1654 ;	 function drawAlphanum
                                   1655 ;	-----------------------------------------
      00077D                       1656 _drawAlphanum:
                                   1657 ;	main.c: 119: OLED_drawtext(olednum, "ABCDEFGHIJKLM",0,0);
      00077D AEr0Dr3D         [ 2] 1658 	ldw	x, #___str_1+0
      000780 4B 00            [ 1] 1659 	push	#0x00
      000782 4B 00            [ 1] 1660 	push	#0x00
      000784 89               [ 2] 1661 	pushw	x
      000785 7B 07            [ 1] 1662 	ld	a, (0x07, sp)
      000787 88               [ 1] 1663 	push	a
      000788 CDr04rBF         [ 4] 1664 	call	_OLED_drawtext
      00078B 5B 05            [ 2] 1665 	addw	sp, #5
                                   1666 ;	main.c: 120: OLED_drawtext(olednum, "NOPQRSTUVWXYZ",1,0);
      00078D AEr0Dr4B         [ 2] 1667 	ldw	x, #___str_2+0
      000790 4B 00            [ 1] 1668 	push	#0x00
      000792 4B 01            [ 1] 1669 	push	#0x01
      000794 89               [ 2] 1670 	pushw	x
      000795 7B 07            [ 1] 1671 	ld	a, (0x07, sp)
      000797 88               [ 1] 1672 	push	a
      000798 CDr04rBF         [ 4] 1673 	call	_OLED_drawtext
      00079B 5B 05            [ 2] 1674 	addw	sp, #5
                                   1675 ;	main.c: 122: OLED_drawtext(olednum, "abcdefghijklm",3,0);
      00079D AEr0Dr59         [ 2] 1676 	ldw	x, #___str_3+0
      0007A0 4B 00            [ 1] 1677 	push	#0x00
      0007A2 4B 03            [ 1] 1678 	push	#0x03
      0007A4 89               [ 2] 1679 	pushw	x
      0007A5 7B 07            [ 1] 1680 	ld	a, (0x07, sp)
      0007A7 88               [ 1] 1681 	push	a
      0007A8 CDr04rBF         [ 4] 1682 	call	_OLED_drawtext
      0007AB 5B 05            [ 2] 1683 	addw	sp, #5
                                   1684 ;	main.c: 123: OLED_drawtext(olednum, "nopqrstuvwxyz",4,0);
      0007AD AEr0Dr67         [ 2] 1685 	ldw	x, #___str_4+0
      0007B0 4B 00            [ 1] 1686 	push	#0x00
      0007B2 4B 04            [ 1] 1687 	push	#0x04
      0007B4 89               [ 2] 1688 	pushw	x
      0007B5 7B 07            [ 1] 1689 	ld	a, (0x07, sp)
      0007B7 88               [ 1] 1690 	push	a
      0007B8 CDr04rBF         [ 4] 1691 	call	_OLED_drawtext
      0007BB 5B 05            [ 2] 1692 	addw	sp, #5
                                   1693 ;	main.c: 125: OLED_drawtext(olednum, "0123456789",6,0);
      0007BD AEr0Dr75         [ 2] 1694 	ldw	x, #___str_5+0
      0007C0 4B 00            [ 1] 1695 	push	#0x00
      0007C2 4B 06            [ 1] 1696 	push	#0x06
      0007C4 89               [ 2] 1697 	pushw	x
      0007C5 7B 07            [ 1] 1698 	ld	a, (0x07, sp)
      0007C7 88               [ 1] 1699 	push	a
      0007C8 CDr04rBF         [ 4] 1700 	call	_OLED_drawtext
      0007CB 5B 05            [ 2] 1701 	addw	sp, #5
                                   1702 ;	main.c: 127: OLED_drawtext(olednum, "OLED TEST : CHAR",7,0);
      0007CD AEr0Dr80         [ 2] 1703 	ldw	x, #___str_6+0
      0007D0 4B 00            [ 1] 1704 	push	#0x00
      0007D2 4B 07            [ 1] 1705 	push	#0x07
      0007D4 89               [ 2] 1706 	pushw	x
      0007D5 7B 07            [ 1] 1707 	ld	a, (0x07, sp)
      0007D7 88               [ 1] 1708 	push	a
      0007D8 CDr04rBF         [ 4] 1709 	call	_OLED_drawtext
      0007DB 5B 05            [ 2] 1710 	addw	sp, #5
      0007DD 81               [ 4] 1711 	ret
                                   1712 ;	main.c: 130: void drawPunct(unsigned char olednum)
                                   1713 ;	-----------------------------------------
                                   1714 ;	 function drawPunct
                                   1715 ;	-----------------------------------------
      0007DE                       1716 _drawPunct:
                                   1717 ;	main.c: 132: OLED_drawtext(olednum, "<{([+_-=])}>",0,0);
      0007DE AEr0Dr91         [ 2] 1718 	ldw	x, #___str_7+0
      0007E1 4B 00            [ 1] 1719 	push	#0x00
      0007E3 4B 00            [ 1] 1720 	push	#0x00
      0007E5 89               [ 2] 1721 	pushw	x
      0007E6 7B 07            [ 1] 1722 	ld	a, (0x07, sp)
      0007E8 88               [ 1] 1723 	push	a
      0007E9 CDr04rBF         [ 4] 1724 	call	_OLED_drawtext
      0007EC 5B 05            [ 2] 1725 	addw	sp, #5
                                   1726 ;	main.c: 133: OLED_drawtext(olednum, "!@#$%^&*`|~?",2,0);
      0007EE AEr0Dr9E         [ 2] 1727 	ldw	x, #___str_8+0
      0007F1 4B 00            [ 1] 1728 	push	#0x00
      0007F3 4B 02            [ 1] 1729 	push	#0x02
      0007F5 89               [ 2] 1730 	pushw	x
      0007F6 7B 07            [ 1] 1731 	ld	a, (0x07, sp)
      0007F8 88               [ 1] 1732 	push	a
      0007F9 CDr04rBF         [ 4] 1733 	call	_OLED_drawtext
      0007FC 5B 05            [ 2] 1734 	addw	sp, #5
                                   1735 ;	main.c: 134: OLED_drawtext(olednum, ".\,\"\'\\/ :;",4,0);
      0007FE AEr0DrAB         [ 2] 1736 	ldw	x, #___str_9+0
      000801 4B 00            [ 1] 1737 	push	#0x00
      000803 4B 04            [ 1] 1738 	push	#0x04
      000805 89               [ 2] 1739 	pushw	x
      000806 7B 07            [ 1] 1740 	ld	a, (0x07, sp)
      000808 88               [ 1] 1741 	push	a
      000809 CDr04rBF         [ 4] 1742 	call	_OLED_drawtext
      00080C 5B 05            [ 2] 1743 	addw	sp, #5
                                   1744 ;	main.c: 136: OLED_drawtext(olednum, "OLED TEST : CHAR",7,0);
      00080E AEr0Dr80         [ 2] 1745 	ldw	x, #___str_6+0
      000811 4B 00            [ 1] 1746 	push	#0x00
      000813 4B 07            [ 1] 1747 	push	#0x07
      000815 89               [ 2] 1748 	pushw	x
      000816 7B 07            [ 1] 1749 	ld	a, (0x07, sp)
      000818 88               [ 1] 1750 	push	a
      000819 CDr04rBF         [ 4] 1751 	call	_OLED_drawtext
      00081C 5B 05            [ 2] 1752 	addw	sp, #5
      00081E 81               [ 4] 1753 	ret
                                   1754 ;	main.c: 139: void drawFrame(unsigned char olednum)
                                   1755 ;	-----------------------------------------
                                   1756 ;	 function drawFrame
                                   1757 ;	-----------------------------------------
      00081F                       1758 _drawFrame:
                                   1759 ;	main.c: 143: OLED_drawchar(olednum, FRAME_TOP_LEFT,1,startcol);
      00081F 4B 14            [ 1] 1760 	push	#0x14
      000821 4B 01            [ 1] 1761 	push	#0x01
      000823 4B 80            [ 1] 1762 	push	#0x80
      000825 7B 06            [ 1] 1763 	ld	a, (0x06, sp)
      000827 88               [ 1] 1764 	push	a
      000828 CDr04r1C         [ 4] 1765 	call	_OLED_drawchar
      00082B 5B 04            [ 2] 1766 	addw	sp, #4
                                   1767 ;	main.c: 144: OLED_drawchar(olednum, FRAME_LINE_HOR,1,startcol+8);
      00082D 4B 1C            [ 1] 1768 	push	#0x1c
      00082F 4B 01            [ 1] 1769 	push	#0x01
      000831 4B 89            [ 1] 1770 	push	#0x89
      000833 7B 06            [ 1] 1771 	ld	a, (0x06, sp)
      000835 88               [ 1] 1772 	push	a
      000836 CDr04r1C         [ 4] 1773 	call	_OLED_drawchar
      000839 5B 04            [ 2] 1774 	addw	sp, #4
                                   1775 ;	main.c: 145: OLED_drawchar(olednum, FRAME_TOP,1,startcol+16);
      00083B 4B 24            [ 1] 1776 	push	#0x24
      00083D 4B 01            [ 1] 1777 	push	#0x01
      00083F 4B 81            [ 1] 1778 	push	#0x81
      000841 7B 06            [ 1] 1779 	ld	a, (0x06, sp)
      000843 88               [ 1] 1780 	push	a
      000844 CDr04r1C         [ 4] 1781 	call	_OLED_drawchar
      000847 5B 04            [ 2] 1782 	addw	sp, #4
                                   1783 ;	main.c: 146: OLED_drawchar(olednum, FRAME_LINE_HOR,1,startcol+24);
      000849 4B 2C            [ 1] 1784 	push	#0x2c
      00084B 4B 01            [ 1] 1785 	push	#0x01
      00084D 4B 89            [ 1] 1786 	push	#0x89
      00084F 7B 06            [ 1] 1787 	ld	a, (0x06, sp)
      000851 88               [ 1] 1788 	push	a
      000852 CDr04r1C         [ 4] 1789 	call	_OLED_drawchar
      000855 5B 04            [ 2] 1790 	addw	sp, #4
                                   1791 ;	main.c: 147: OLED_drawchar(olednum, FRAME_TOP_RIGHT,1,startcol+32);
      000857 4B 34            [ 1] 1792 	push	#0x34
      000859 4B 01            [ 1] 1793 	push	#0x01
      00085B 4B 82            [ 1] 1794 	push	#0x82
      00085D 7B 06            [ 1] 1795 	ld	a, (0x06, sp)
      00085F 88               [ 1] 1796 	push	a
      000860 CDr04r1C         [ 4] 1797 	call	_OLED_drawchar
      000863 5B 04            [ 2] 1798 	addw	sp, #4
                                   1799 ;	main.c: 149: OLED_drawchar(olednum, FRAME_LINE_VER,2,startcol);
      000865 4B 14            [ 1] 1800 	push	#0x14
      000867 4B 02            [ 1] 1801 	push	#0x02
      000869 4B 8A            [ 1] 1802 	push	#0x8a
      00086B 7B 06            [ 1] 1803 	ld	a, (0x06, sp)
      00086D 88               [ 1] 1804 	push	a
      00086E CDr04r1C         [ 4] 1805 	call	_OLED_drawchar
      000871 5B 04            [ 2] 1806 	addw	sp, #4
                                   1807 ;	main.c: 150: OLED_drawchar(olednum, FRAME_LINE_VER,2,startcol+16);
      000873 4B 24            [ 1] 1808 	push	#0x24
      000875 4B 02            [ 1] 1809 	push	#0x02
      000877 4B 8A            [ 1] 1810 	push	#0x8a
      000879 7B 06            [ 1] 1811 	ld	a, (0x06, sp)
      00087B 88               [ 1] 1812 	push	a
      00087C CDr04r1C         [ 4] 1813 	call	_OLED_drawchar
      00087F 5B 04            [ 2] 1814 	addw	sp, #4
                                   1815 ;	main.c: 151: OLED_drawchar(olednum, FRAME_LINE_VER,2,startcol+32);
      000881 4B 34            [ 1] 1816 	push	#0x34
      000883 4B 02            [ 1] 1817 	push	#0x02
      000885 4B 8A            [ 1] 1818 	push	#0x8a
      000887 7B 06            [ 1] 1819 	ld	a, (0x06, sp)
      000889 88               [ 1] 1820 	push	a
      00088A CDr04r1C         [ 4] 1821 	call	_OLED_drawchar
      00088D 5B 04            [ 2] 1822 	addw	sp, #4
                                   1823 ;	main.c: 153: OLED_drawchar(olednum, FRAME_MID_LEFT,3,startcol);
      00088F 4B 14            [ 1] 1824 	push	#0x14
      000891 4B 03            [ 1] 1825 	push	#0x03
      000893 4B 83            [ 1] 1826 	push	#0x83
      000895 7B 06            [ 1] 1827 	ld	a, (0x06, sp)
      000897 88               [ 1] 1828 	push	a
      000898 CDr04r1C         [ 4] 1829 	call	_OLED_drawchar
      00089B 5B 04            [ 2] 1830 	addw	sp, #4
                                   1831 ;	main.c: 154: OLED_drawchar(olednum, FRAME_LINE_HOR,3,startcol+8);
      00089D 4B 1C            [ 1] 1832 	push	#0x1c
      00089F 4B 03            [ 1] 1833 	push	#0x03
      0008A1 4B 89            [ 1] 1834 	push	#0x89
      0008A3 7B 06            [ 1] 1835 	ld	a, (0x06, sp)
      0008A5 88               [ 1] 1836 	push	a
      0008A6 CDr04r1C         [ 4] 1837 	call	_OLED_drawchar
      0008A9 5B 04            [ 2] 1838 	addw	sp, #4
                                   1839 ;	main.c: 155: OLED_drawchar(olednum, FRAME_CENTER,3,startcol+16);
      0008AB 4B 24            [ 1] 1840 	push	#0x24
      0008AD 4B 03            [ 1] 1841 	push	#0x03
      0008AF 4B 84            [ 1] 1842 	push	#0x84
      0008B1 7B 06            [ 1] 1843 	ld	a, (0x06, sp)
      0008B3 88               [ 1] 1844 	push	a
      0008B4 CDr04r1C         [ 4] 1845 	call	_OLED_drawchar
      0008B7 5B 04            [ 2] 1846 	addw	sp, #4
                                   1847 ;	main.c: 156: OLED_drawchar(olednum, FRAME_LINE_HOR,3,startcol+24);
      0008B9 4B 2C            [ 1] 1848 	push	#0x2c
      0008BB 4B 03            [ 1] 1849 	push	#0x03
      0008BD 4B 89            [ 1] 1850 	push	#0x89
      0008BF 7B 06            [ 1] 1851 	ld	a, (0x06, sp)
      0008C1 88               [ 1] 1852 	push	a
      0008C2 CDr04r1C         [ 4] 1853 	call	_OLED_drawchar
      0008C5 5B 04            [ 2] 1854 	addw	sp, #4
                                   1855 ;	main.c: 157: OLED_drawchar(olednum, FRAME_MID_RIGHT,3,startcol+32);
      0008C7 4B 34            [ 1] 1856 	push	#0x34
      0008C9 4B 03            [ 1] 1857 	push	#0x03
      0008CB 4B 85            [ 1] 1858 	push	#0x85
      0008CD 7B 06            [ 1] 1859 	ld	a, (0x06, sp)
      0008CF 88               [ 1] 1860 	push	a
      0008D0 CDr04r1C         [ 4] 1861 	call	_OLED_drawchar
      0008D3 5B 04            [ 2] 1862 	addw	sp, #4
                                   1863 ;	main.c: 159: OLED_drawchar(olednum, FRAME_LINE_VER,4,startcol);
      0008D5 4B 14            [ 1] 1864 	push	#0x14
      0008D7 4B 04            [ 1] 1865 	push	#0x04
      0008D9 4B 8A            [ 1] 1866 	push	#0x8a
      0008DB 7B 06            [ 1] 1867 	ld	a, (0x06, sp)
      0008DD 88               [ 1] 1868 	push	a
      0008DE CDr04r1C         [ 4] 1869 	call	_OLED_drawchar
      0008E1 5B 04            [ 2] 1870 	addw	sp, #4
                                   1871 ;	main.c: 160: OLED_drawchar(olednum, FRAME_LINE_VER,4,startcol+16);
      0008E3 4B 24            [ 1] 1872 	push	#0x24
      0008E5 4B 04            [ 1] 1873 	push	#0x04
      0008E7 4B 8A            [ 1] 1874 	push	#0x8a
      0008E9 7B 06            [ 1] 1875 	ld	a, (0x06, sp)
      0008EB 88               [ 1] 1876 	push	a
      0008EC CDr04r1C         [ 4] 1877 	call	_OLED_drawchar
      0008EF 5B 04            [ 2] 1878 	addw	sp, #4
                                   1879 ;	main.c: 161: OLED_drawchar(olednum, FRAME_LINE_VER,4,startcol+32);
      0008F1 4B 34            [ 1] 1880 	push	#0x34
      0008F3 4B 04            [ 1] 1881 	push	#0x04
      0008F5 4B 8A            [ 1] 1882 	push	#0x8a
      0008F7 7B 06            [ 1] 1883 	ld	a, (0x06, sp)
      0008F9 88               [ 1] 1884 	push	a
      0008FA CDr04r1C         [ 4] 1885 	call	_OLED_drawchar
      0008FD 5B 04            [ 2] 1886 	addw	sp, #4
                                   1887 ;	main.c: 163: OLED_drawchar(olednum, FRAME_BOT_LEFT,5,startcol);
      0008FF 4B 14            [ 1] 1888 	push	#0x14
      000901 4B 05            [ 1] 1889 	push	#0x05
      000903 4B 86            [ 1] 1890 	push	#0x86
      000905 7B 06            [ 1] 1891 	ld	a, (0x06, sp)
      000907 88               [ 1] 1892 	push	a
      000908 CDr04r1C         [ 4] 1893 	call	_OLED_drawchar
      00090B 5B 04            [ 2] 1894 	addw	sp, #4
                                   1895 ;	main.c: 164: OLED_drawchar(olednum, FRAME_LINE_HOR,5,startcol+8);
      00090D 4B 1C            [ 1] 1896 	push	#0x1c
      00090F 4B 05            [ 1] 1897 	push	#0x05
      000911 4B 89            [ 1] 1898 	push	#0x89
      000913 7B 06            [ 1] 1899 	ld	a, (0x06, sp)
      000915 88               [ 1] 1900 	push	a
      000916 CDr04r1C         [ 4] 1901 	call	_OLED_drawchar
      000919 5B 04            [ 2] 1902 	addw	sp, #4
                                   1903 ;	main.c: 165: OLED_drawchar(olednum, FRAME_BOT,5,startcol+16);
      00091B 4B 24            [ 1] 1904 	push	#0x24
      00091D 4B 05            [ 1] 1905 	push	#0x05
      00091F 4B 87            [ 1] 1906 	push	#0x87
      000921 7B 06            [ 1] 1907 	ld	a, (0x06, sp)
      000923 88               [ 1] 1908 	push	a
      000924 CDr04r1C         [ 4] 1909 	call	_OLED_drawchar
      000927 5B 04            [ 2] 1910 	addw	sp, #4
                                   1911 ;	main.c: 166: OLED_drawchar(olednum, FRAME_LINE_HOR,5,startcol+24);
      000929 4B 2C            [ 1] 1912 	push	#0x2c
      00092B 4B 05            [ 1] 1913 	push	#0x05
      00092D 4B 89            [ 1] 1914 	push	#0x89
      00092F 7B 06            [ 1] 1915 	ld	a, (0x06, sp)
      000931 88               [ 1] 1916 	push	a
      000932 CDr04r1C         [ 4] 1917 	call	_OLED_drawchar
      000935 5B 04            [ 2] 1918 	addw	sp, #4
                                   1919 ;	main.c: 167: OLED_drawchar(olednum, FRAME_BOT_RIGHT,5,startcol+32);
      000937 4B 34            [ 1] 1920 	push	#0x34
      000939 4B 05            [ 1] 1921 	push	#0x05
      00093B 4B 88            [ 1] 1922 	push	#0x88
      00093D 7B 06            [ 1] 1923 	ld	a, (0x06, sp)
      00093F 88               [ 1] 1924 	push	a
      000940 CDr04r1C         [ 4] 1925 	call	_OLED_drawchar
      000943 5B 04            [ 2] 1926 	addw	sp, #4
                                   1927 ;	main.c: 169: OLED_drawtext(olednum, " OLED TEST : SYM",7,0);
      000945 AEr0DrB5         [ 2] 1928 	ldw	x, #___str_10+0
      000948 4B 00            [ 1] 1929 	push	#0x00
      00094A 4B 07            [ 1] 1930 	push	#0x07
      00094C 89               [ 2] 1931 	pushw	x
      00094D 7B 07            [ 1] 1932 	ld	a, (0x07, sp)
      00094F 88               [ 1] 1933 	push	a
      000950 CDr04rBF         [ 4] 1934 	call	_OLED_drawtext
      000953 5B 05            [ 2] 1935 	addw	sp, #5
      000955 81               [ 4] 1936 	ret
                                   1937 ;	main.c: 171: void drawArrow(unsigned char olednum)
                                   1938 ;	-----------------------------------------
                                   1939 ;	 function drawArrow
                                   1940 ;	-----------------------------------------
      000956                       1941 _drawArrow:
                                   1942 ;	main.c: 175: OLED_drawchar(olednum, ARROW_UP_LEFT,1,startcol);
      000956 4B 14            [ 1] 1943 	push	#0x14
      000958 4B 01            [ 1] 1944 	push	#0x01
      00095A 4B 8F            [ 1] 1945 	push	#0x8f
      00095C 7B 06            [ 1] 1946 	ld	a, (0x06, sp)
      00095E 88               [ 1] 1947 	push	a
      00095F CDr04r1C         [ 4] 1948 	call	_OLED_drawchar
      000962 5B 04            [ 2] 1949 	addw	sp, #4
                                   1950 ;	main.c: 176: OLED_drawchar(olednum, ARROW_UP,1,startcol+16);
      000964 4B 24            [ 1] 1951 	push	#0x24
      000966 4B 01            [ 1] 1952 	push	#0x01
      000968 4B 8B            [ 1] 1953 	push	#0x8b
      00096A 7B 06            [ 1] 1954 	ld	a, (0x06, sp)
      00096C 88               [ 1] 1955 	push	a
      00096D CDr04r1C         [ 4] 1956 	call	_OLED_drawchar
      000970 5B 04            [ 2] 1957 	addw	sp, #4
                                   1958 ;	main.c: 177: OLED_drawchar(olednum, ARROW_UP_RIGHT,1,startcol+32);
      000972 4B 34            [ 1] 1959 	push	#0x34
      000974 4B 01            [ 1] 1960 	push	#0x01
      000976 4B 90            [ 1] 1961 	push	#0x90
      000978 7B 06            [ 1] 1962 	ld	a, (0x06, sp)
      00097A 88               [ 1] 1963 	push	a
      00097B CDr04r1C         [ 4] 1964 	call	_OLED_drawchar
      00097E 5B 04            [ 2] 1965 	addw	sp, #4
                                   1966 ;	main.c: 179: OLED_drawchar(olednum, ARROW_LEFT,3,startcol);
      000980 4B 14            [ 1] 1967 	push	#0x14
      000982 4B 03            [ 1] 1968 	push	#0x03
      000984 4B 8D            [ 1] 1969 	push	#0x8d
      000986 7B 06            [ 1] 1970 	ld	a, (0x06, sp)
      000988 88               [ 1] 1971 	push	a
      000989 CDr04r1C         [ 4] 1972 	call	_OLED_drawchar
      00098C 5B 04            [ 2] 1973 	addw	sp, #4
                                   1974 ;	main.c: 180: OLED_drawchar(olednum, ARROW_POINT,3,startcol+16);
      00098E 4B 24            [ 1] 1975 	push	#0x24
      000990 4B 03            [ 1] 1976 	push	#0x03
      000992 4B 93            [ 1] 1977 	push	#0x93
      000994 7B 06            [ 1] 1978 	ld	a, (0x06, sp)
      000996 88               [ 1] 1979 	push	a
      000997 CDr04r1C         [ 4] 1980 	call	_OLED_drawchar
      00099A 5B 04            [ 2] 1981 	addw	sp, #4
                                   1982 ;	main.c: 181: OLED_drawchar(olednum, ARROW_RIGHT,3,startcol+32);
      00099C 4B 34            [ 1] 1983 	push	#0x34
      00099E 4B 03            [ 1] 1984 	push	#0x03
      0009A0 4B 8E            [ 1] 1985 	push	#0x8e
      0009A2 7B 06            [ 1] 1986 	ld	a, (0x06, sp)
      0009A4 88               [ 1] 1987 	push	a
      0009A5 CDr04r1C         [ 4] 1988 	call	_OLED_drawchar
      0009A8 5B 04            [ 2] 1989 	addw	sp, #4
                                   1990 ;	main.c: 183: OLED_drawchar(olednum, ARROW_DOWN_LEFT,5,startcol);
      0009AA 4B 14            [ 1] 1991 	push	#0x14
      0009AC 4B 05            [ 1] 1992 	push	#0x05
      0009AE 4B 91            [ 1] 1993 	push	#0x91
      0009B0 7B 06            [ 1] 1994 	ld	a, (0x06, sp)
      0009B2 88               [ 1] 1995 	push	a
      0009B3 CDr04r1C         [ 4] 1996 	call	_OLED_drawchar
      0009B6 5B 04            [ 2] 1997 	addw	sp, #4
                                   1998 ;	main.c: 184: OLED_drawchar(olednum, ARROW_DOWN,5,startcol+16);
      0009B8 4B 24            [ 1] 1999 	push	#0x24
      0009BA 4B 05            [ 1] 2000 	push	#0x05
      0009BC 4B 8C            [ 1] 2001 	push	#0x8c
      0009BE 7B 06            [ 1] 2002 	ld	a, (0x06, sp)
      0009C0 88               [ 1] 2003 	push	a
      0009C1 CDr04r1C         [ 4] 2004 	call	_OLED_drawchar
      0009C4 5B 04            [ 2] 2005 	addw	sp, #4
                                   2006 ;	main.c: 185: OLED_drawchar(olednum, ARROW_DOWN_RIGHT,5,startcol+32);
      0009C6 4B 34            [ 1] 2007 	push	#0x34
      0009C8 4B 05            [ 1] 2008 	push	#0x05
      0009CA 4B 92            [ 1] 2009 	push	#0x92
      0009CC 7B 06            [ 1] 2010 	ld	a, (0x06, sp)
      0009CE 88               [ 1] 2011 	push	a
      0009CF CDr04r1C         [ 4] 2012 	call	_OLED_drawchar
      0009D2 5B 04            [ 2] 2013 	addw	sp, #4
                                   2014 ;	main.c: 187: OLED_drawtext(olednum, " OLED TEST : SYM",7,0);
      0009D4 AEr0DrB5         [ 2] 2015 	ldw	x, #___str_10+0
      0009D7 4B 00            [ 1] 2016 	push	#0x00
      0009D9 4B 07            [ 1] 2017 	push	#0x07
      0009DB 89               [ 2] 2018 	pushw	x
      0009DC 7B 07            [ 1] 2019 	ld	a, (0x07, sp)
      0009DE 88               [ 1] 2020 	push	a
      0009DF CDr04rBF         [ 4] 2021 	call	_OLED_drawtext
      0009E2 5B 05            [ 2] 2022 	addw	sp, #5
      0009E4 81               [ 4] 2023 	ret
                                   2024 ;	main.c: 190: void drawBytes(unsigned char olednum)
                                   2025 ;	-----------------------------------------
                                   2026 ;	 function drawBytes
                                   2027 ;	-----------------------------------------
      0009E5                       2028 _drawBytes:
      0009E5 52 06            [ 2] 2029 	sub	sp, #6
                                   2030 ;	main.c: 194: OLED_setpos(olednum,3,5);
      0009E7 4B 05            [ 1] 2031 	push	#0x05
      0009E9 4B 03            [ 1] 2032 	push	#0x03
      0009EB 7B 0B            [ 1] 2033 	ld	a, (0x0b, sp)
      0009ED 88               [ 1] 2034 	push	a
      0009EE CDr04r01         [ 4] 2035 	call	_OLED_setpos
      0009F1 5B 03            [ 2] 2036 	addw	sp, #3
                                   2037 ;	main.c: 195: for(Ts=0;Ts<11;Ts++) //Draw pattern 11 times
      0009F3 AEr00r00         [ 2] 2038 	ldw	x, #_dsine+0
      0009F6 1F 03            [ 2] 2039 	ldw	(0x03, sp), x
      0009F8 0F 02            [ 1] 2040 	clr	(0x02, sp)
                                   2041 ;	main.c: 197: for(ds=0;ds<10;ds++)
      0009FA                       2042 00115$:
      0009FA 0F 01            [ 1] 2043 	clr	(0x01, sp)
      0009FC                       2044 00105$:
                                   2045 ;	main.c: 199: OLED_drawbyte(olednum, dsine[ds]);
      0009FC 5F               [ 1] 2046 	clrw	x
      0009FD 7B 01            [ 1] 2047 	ld	a, (0x01, sp)
      0009FF 97               [ 1] 2048 	ld	xl, a
      000A00 72 FB 03         [ 2] 2049 	addw	x, (0x03, sp)
      000A03 F6               [ 1] 2050 	ld	a, (x)
      000A04 88               [ 1] 2051 	push	a
      000A05 7B 0A            [ 1] 2052 	ld	a, (0x0a, sp)
      000A07 88               [ 1] 2053 	push	a
      000A08 CDr04r10         [ 4] 2054 	call	_OLED_drawbyte
      000A0B 5B 02            [ 2] 2055 	addw	sp, #2
                                   2056 ;	main.c: 197: for(ds=0;ds<10;ds++)
      000A0D 0C 01            [ 1] 2057 	inc	(0x01, sp)
      000A0F 7B 01            [ 1] 2058 	ld	a, (0x01, sp)
      000A11 A1 0A            [ 1] 2059 	cp	a, #0x0a
      000A13 25 E7            [ 1] 2060 	jrc	00105$
                                   2061 ;	main.c: 195: for(Ts=0;Ts<11;Ts++) //Draw pattern 11 times
      000A15 0C 02            [ 1] 2062 	inc	(0x02, sp)
      000A17 7B 02            [ 1] 2063 	ld	a, (0x02, sp)
      000A19 A1 0B            [ 1] 2064 	cp	a, #0x0b
      000A1B 25 DD            [ 1] 2065 	jrc	00115$
                                   2066 ;	main.c: 203: OLED_setpos(olednum,5,3);
      000A1D 4B 03            [ 1] 2067 	push	#0x03
      000A1F 4B 05            [ 1] 2068 	push	#0x05
      000A21 7B 0B            [ 1] 2069 	ld	a, (0x0b, sp)
      000A23 88               [ 1] 2070 	push	a
      000A24 CDr04r01         [ 4] 2071 	call	_OLED_setpos
      000A27 5B 03            [ 2] 2072 	addw	sp, #3
                                   2073 ;	main.c: 204: for(Ts=0;Ts<8;Ts++) //Draw pattern 8 times
      000A29 AEr00r0A         [ 2] 2074 	ldw	x, #_dtri+0
      000A2C 1F 05            [ 2] 2075 	ldw	(0x05, sp), x
      000A2E 0F 02            [ 1] 2076 	clr	(0x02, sp)
                                   2077 ;	main.c: 206: for(ds=0;ds<14;ds++)
      000A30                       2078 00119$:
      000A30 0F 01            [ 1] 2079 	clr	(0x01, sp)
      000A32                       2080 00109$:
                                   2081 ;	main.c: 208: OLED_drawbyte(olednum, dtri[ds]);
      000A32 5F               [ 1] 2082 	clrw	x
      000A33 7B 01            [ 1] 2083 	ld	a, (0x01, sp)
      000A35 97               [ 1] 2084 	ld	xl, a
      000A36 72 FB 05         [ 2] 2085 	addw	x, (0x05, sp)
      000A39 F6               [ 1] 2086 	ld	a, (x)
      000A3A 88               [ 1] 2087 	push	a
      000A3B 7B 0A            [ 1] 2088 	ld	a, (0x0a, sp)
      000A3D 88               [ 1] 2089 	push	a
      000A3E CDr04r10         [ 4] 2090 	call	_OLED_drawbyte
      000A41 5B 02            [ 2] 2091 	addw	sp, #2
                                   2092 ;	main.c: 206: for(ds=0;ds<14;ds++)
      000A43 0C 01            [ 1] 2093 	inc	(0x01, sp)
      000A45 7B 01            [ 1] 2094 	ld	a, (0x01, sp)
      000A47 A1 0E            [ 1] 2095 	cp	a, #0x0e
      000A49 25 E7            [ 1] 2096 	jrc	00109$
                                   2097 ;	main.c: 204: for(Ts=0;Ts<8;Ts++) //Draw pattern 8 times
      000A4B 0C 02            [ 1] 2098 	inc	(0x02, sp)
      000A4D 7B 02            [ 1] 2099 	ld	a, (0x02, sp)
      000A4F A1 08            [ 1] 2100 	cp	a, #0x08
      000A51 25 DD            [ 1] 2101 	jrc	00119$
                                   2102 ;	main.c: 212: OLED_drawtext(olednum, "  DRAW PATTERN  ",7,0);
      000A53 AEr0DrC6         [ 2] 2103 	ldw	x, #___str_11+0
      000A56 4B 00            [ 1] 2104 	push	#0x00
      000A58 4B 07            [ 1] 2105 	push	#0x07
      000A5A 89               [ 2] 2106 	pushw	x
      000A5B 7B 0D            [ 1] 2107 	ld	a, (0x0d, sp)
      000A5D 88               [ 1] 2108 	push	a
      000A5E CDr04rBF         [ 4] 2109 	call	_OLED_drawtext
      000A61 5B 0B            [ 2] 2110 	addw	sp, #11
      000A63 81               [ 4] 2111 	ret
                                   2112 ;	main.c: 215: void drawLoadingBar(unsigned char olednum)
                                   2113 ;	-----------------------------------------
                                   2114 ;	 function drawLoadingBar
                                   2115 ;	-----------------------------------------
      000A64                       2116 _drawLoadingBar:
      000A64 88               [ 1] 2117 	push	a
                                   2118 ;	main.c: 219: OLED_setpos(olednum, 4,5);
      000A65 4B 05            [ 1] 2119 	push	#0x05
      000A67 4B 04            [ 1] 2120 	push	#0x04
      000A69 7B 06            [ 1] 2121 	ld	a, (0x06, sp)
      000A6B 88               [ 1] 2122 	push	a
      000A6C CDr04r01         [ 4] 2123 	call	_OLED_setpos
      000A6F 5B 03            [ 2] 2124 	addw	sp, #3
                                   2125 ;	main.c: 221: for(lb=5;lb<123;lb++)
      000A71 A6 05            [ 1] 2126 	ld	a, #0x05
      000A73 6B 01            [ 1] 2127 	ld	(0x01, sp), a
      000A75                       2128 00102$:
                                   2129 ;	main.c: 223: OLED_drawbyte(olednum, 0xFF);
      000A75 4B FF            [ 1] 2130 	push	#0xff
      000A77 7B 05            [ 1] 2131 	ld	a, (0x05, sp)
      000A79 88               [ 1] 2132 	push	a
      000A7A CDr04r10         [ 4] 2133 	call	_OLED_drawbyte
      000A7D 5B 02            [ 2] 2134 	addw	sp, #2
                                   2135 ;	main.c: 224: delay_ms(10);
      000A7F 4B 0A            [ 1] 2136 	push	#0x0a
      000A81 5F               [ 1] 2137 	clrw	x
      000A82 89               [ 2] 2138 	pushw	x
      000A83 4B 00            [ 1] 2139 	push	#0x00
      000A85 CDr00r55         [ 4] 2140 	call	_delay_ms
      000A88 5B 04            [ 2] 2141 	addw	sp, #4
                                   2142 ;	main.c: 221: for(lb=5;lb<123;lb++)
      000A8A 0C 01            [ 1] 2143 	inc	(0x01, sp)
      000A8C 7B 01            [ 1] 2144 	ld	a, (0x01, sp)
      000A8E A1 7B            [ 1] 2145 	cp	a, #0x7b
      000A90 25 E3            [ 1] 2146 	jrc	00102$
                                   2147 ;	main.c: 226: delay_ms(1000);
      000A92 4B E8            [ 1] 2148 	push	#0xe8
      000A94 4B 03            [ 1] 2149 	push	#0x03
      000A96 5F               [ 1] 2150 	clrw	x
      000A97 89               [ 2] 2151 	pushw	x
      000A98 CDr00r55         [ 4] 2152 	call	_delay_ms
      000A9B 5B 04            [ 2] 2153 	addw	sp, #4
                                   2154 ;	main.c: 227: OLED_clearblock(olednum,4,5,122); //Start & finish column = start & finish lb
      000A9D 4B 7A            [ 1] 2155 	push	#0x7a
      000A9F 4B 05            [ 1] 2156 	push	#0x05
      000AA1 4B 04            [ 1] 2157 	push	#0x04
      000AA3 7B 07            [ 1] 2158 	ld	a, (0x07, sp)
      000AA5 88               [ 1] 2159 	push	a
      000AA6 CDr05r65         [ 4] 2160 	call	_OLED_clearblock
      000AA9 5B 05            [ 2] 2161 	addw	sp, #5
      000AAB 81               [ 4] 2162 	ret
                                   2163 	.area CODE
      000AAC                       2164 _font_arr:
      000AAC 00                    2165 	.db #0x00	; 0
      000AAD 00                    2166 	.db #0x00	; 0
      000AAE 00                    2167 	.db #0x00	; 0
      000AAF 00                    2168 	.db #0x00	; 0
      000AB0 00                    2169 	.db #0x00	; 0
      000AB1 00                    2170 	.db #0x00	; 0
      000AB2 00                    2171 	.db #0x00	; 0
      000AB3 5F                    2172 	.db #0x5F	; 95
      000AB4 00                    2173 	.db #0x00	; 0
      000AB5 00                    2174 	.db #0x00	; 0
      000AB6 05                    2175 	.db #0x05	; 5
      000AB7 03                    2176 	.db #0x03	; 3
      000AB8 00                    2177 	.db #0x00	; 0
      000AB9 05                    2178 	.db #0x05	; 5
      000ABA 03                    2179 	.db #0x03	; 3
      000ABB 14                    2180 	.db #0x14	; 20
      000ABC 7F                    2181 	.db #0x7F	; 127
      000ABD 14                    2182 	.db #0x14	; 20
      000ABE 7F                    2183 	.db #0x7F	; 127
      000ABF 14                    2184 	.db #0x14	; 20
      000AC0 24                    2185 	.db #0x24	; 36
      000AC1 2A                    2186 	.db #0x2A	; 42
      000AC2 7F                    2187 	.db #0x7F	; 127
      000AC3 2A                    2188 	.db #0x2A	; 42
      000AC4 12                    2189 	.db #0x12	; 18
      000AC5 23                    2190 	.db #0x23	; 35
      000AC6 13                    2191 	.db #0x13	; 19
      000AC7 08                    2192 	.db #0x08	; 8
      000AC8 64                    2193 	.db #0x64	; 100	'd'
      000AC9 62                    2194 	.db #0x62	; 98	'b'
      000ACA 36                    2195 	.db #0x36	; 54	'6'
      000ACB 49                    2196 	.db #0x49	; 73	'I'
      000ACC 55                    2197 	.db #0x55	; 85	'U'
      000ACD 22                    2198 	.db #0x22	; 34
      000ACE 50                    2199 	.db #0x50	; 80	'P'
      000ACF 00                    2200 	.db #0x00	; 0
      000AD0 05                    2201 	.db #0x05	; 5
      000AD1 03                    2202 	.db #0x03	; 3
      000AD2 00                    2203 	.db #0x00	; 0
      000AD3 00                    2204 	.db #0x00	; 0
      000AD4 00                    2205 	.db #0x00	; 0
      000AD5 1C                    2206 	.db #0x1C	; 28
      000AD6 22                    2207 	.db #0x22	; 34
      000AD7 41                    2208 	.db #0x41	; 65	'A'
      000AD8 00                    2209 	.db #0x00	; 0
      000AD9 00                    2210 	.db #0x00	; 0
      000ADA 41                    2211 	.db #0x41	; 65	'A'
      000ADB 22                    2212 	.db #0x22	; 34
      000ADC 1C                    2213 	.db #0x1C	; 28
      000ADD 00                    2214 	.db #0x00	; 0
      000ADE 0A                    2215 	.db #0x0A	; 10
      000ADF 04                    2216 	.db #0x04	; 4
      000AE0 1F                    2217 	.db #0x1F	; 31
      000AE1 04                    2218 	.db #0x04	; 4
      000AE2 0A                    2219 	.db #0x0A	; 10
      000AE3 08                    2220 	.db #0x08	; 8
      000AE4 08                    2221 	.db #0x08	; 8
      000AE5 3E                    2222 	.db #0x3E	; 62
      000AE6 08                    2223 	.db #0x08	; 8
      000AE7 08                    2224 	.db #0x08	; 8
      000AE8 00                    2225 	.db #0x00	; 0
      000AE9 50                    2226 	.db #0x50	; 80	'P'
      000AEA 30                    2227 	.db #0x30	; 48	'0'
      000AEB 00                    2228 	.db #0x00	; 0
      000AEC 00                    2229 	.db #0x00	; 0
      000AED 08                    2230 	.db #0x08	; 8
      000AEE 08                    2231 	.db #0x08	; 8
      000AEF 08                    2232 	.db #0x08	; 8
      000AF0 08                    2233 	.db #0x08	; 8
      000AF1 08                    2234 	.db #0x08	; 8
      000AF2 00                    2235 	.db #0x00	; 0
      000AF3 60                    2236 	.db #0x60	; 96
      000AF4 60                    2237 	.db #0x60	; 96
      000AF5 00                    2238 	.db #0x00	; 0
      000AF6 00                    2239 	.db #0x00	; 0
      000AF7 20                    2240 	.db #0x20	; 32
      000AF8 10                    2241 	.db #0x10	; 16
      000AF9 08                    2242 	.db #0x08	; 8
      000AFA 04                    2243 	.db #0x04	; 4
      000AFB 02                    2244 	.db #0x02	; 2
      000AFC 3E                    2245 	.db #0x3E	; 62
      000AFD 51                    2246 	.db #0x51	; 81	'Q'
      000AFE 49                    2247 	.db #0x49	; 73	'I'
      000AFF 45                    2248 	.db #0x45	; 69	'E'
      000B00 3E                    2249 	.db #0x3E	; 62
      000B01 00                    2250 	.db #0x00	; 0
      000B02 42                    2251 	.db #0x42	; 66	'B'
      000B03 7F                    2252 	.db #0x7F	; 127
      000B04 40                    2253 	.db #0x40	; 64
      000B05 00                    2254 	.db #0x00	; 0
      000B06 42                    2255 	.db #0x42	; 66	'B'
      000B07 61                    2256 	.db #0x61	; 97	'a'
      000B08 51                    2257 	.db #0x51	; 81	'Q'
      000B09 49                    2258 	.db #0x49	; 73	'I'
      000B0A 46                    2259 	.db #0x46	; 70	'F'
      000B0B 22                    2260 	.db #0x22	; 34
      000B0C 41                    2261 	.db #0x41	; 65	'A'
      000B0D 49                    2262 	.db #0x49	; 73	'I'
      000B0E 49                    2263 	.db #0x49	; 73	'I'
      000B0F 36                    2264 	.db #0x36	; 54	'6'
      000B10 18                    2265 	.db #0x18	; 24
      000B11 14                    2266 	.db #0x14	; 20
      000B12 12                    2267 	.db #0x12	; 18
      000B13 7F                    2268 	.db #0x7F	; 127
      000B14 10                    2269 	.db #0x10	; 16
      000B15 27                    2270 	.db #0x27	; 39
      000B16 45                    2271 	.db #0x45	; 69	'E'
      000B17 45                    2272 	.db #0x45	; 69	'E'
      000B18 45                    2273 	.db #0x45	; 69	'E'
      000B19 39                    2274 	.db #0x39	; 57	'9'
      000B1A 3E                    2275 	.db #0x3E	; 62
      000B1B 49                    2276 	.db #0x49	; 73	'I'
      000B1C 49                    2277 	.db #0x49	; 73	'I'
      000B1D 49                    2278 	.db #0x49	; 73	'I'
      000B1E 32                    2279 	.db #0x32	; 50	'2'
      000B1F 61                    2280 	.db #0x61	; 97	'a'
      000B20 11                    2281 	.db #0x11	; 17
      000B21 09                    2282 	.db #0x09	; 9
      000B22 05                    2283 	.db #0x05	; 5
      000B23 03                    2284 	.db #0x03	; 3
      000B24 36                    2285 	.db #0x36	; 54	'6'
      000B25 49                    2286 	.db #0x49	; 73	'I'
      000B26 49                    2287 	.db #0x49	; 73	'I'
      000B27 49                    2288 	.db #0x49	; 73	'I'
      000B28 36                    2289 	.db #0x36	; 54	'6'
      000B29 26                    2290 	.db #0x26	; 38
      000B2A 49                    2291 	.db #0x49	; 73	'I'
      000B2B 49                    2292 	.db #0x49	; 73	'I'
      000B2C 49                    2293 	.db #0x49	; 73	'I'
      000B2D 3E                    2294 	.db #0x3E	; 62
      000B2E 00                    2295 	.db #0x00	; 0
      000B2F 36                    2296 	.db #0x36	; 54	'6'
      000B30 36                    2297 	.db #0x36	; 54	'6'
      000B31 00                    2298 	.db #0x00	; 0
      000B32 00                    2299 	.db #0x00	; 0
      000B33 00                    2300 	.db #0x00	; 0
      000B34 56                    2301 	.db #0x56	; 86	'V'
      000B35 36                    2302 	.db #0x36	; 54	'6'
      000B36 00                    2303 	.db #0x00	; 0
      000B37 00                    2304 	.db #0x00	; 0
      000B38 00                    2305 	.db #0x00	; 0
      000B39 08                    2306 	.db #0x08	; 8
      000B3A 14                    2307 	.db #0x14	; 20
      000B3B 22                    2308 	.db #0x22	; 34
      000B3C 00                    2309 	.db #0x00	; 0
      000B3D 14                    2310 	.db #0x14	; 20
      000B3E 14                    2311 	.db #0x14	; 20
      000B3F 14                    2312 	.db #0x14	; 20
      000B40 14                    2313 	.db #0x14	; 20
      000B41 14                    2314 	.db #0x14	; 20
      000B42 00                    2315 	.db #0x00	; 0
      000B43 22                    2316 	.db #0x22	; 34
      000B44 14                    2317 	.db #0x14	; 20
      000B45 08                    2318 	.db #0x08	; 8
      000B46 00                    2319 	.db #0x00	; 0
      000B47 02                    2320 	.db #0x02	; 2
      000B48 01                    2321 	.db #0x01	; 1
      000B49 51                    2322 	.db #0x51	; 81	'Q'
      000B4A 09                    2323 	.db #0x09	; 9
      000B4B 06                    2324 	.db #0x06	; 6
      000B4C 32                    2325 	.db #0x32	; 50	'2'
      000B4D 49                    2326 	.db #0x49	; 73	'I'
      000B4E 79                    2327 	.db #0x79	; 121	'y'
      000B4F 41                    2328 	.db #0x41	; 65	'A'
      000B50 3E                    2329 	.db #0x3E	; 62
      000B51 7C                    2330 	.db #0x7C	; 124
      000B52 12                    2331 	.db #0x12	; 18
      000B53 11                    2332 	.db #0x11	; 17
      000B54 12                    2333 	.db #0x12	; 18
      000B55 7C                    2334 	.db #0x7C	; 124
      000B56 7F                    2335 	.db #0x7F	; 127
      000B57 49                    2336 	.db #0x49	; 73	'I'
      000B58 49                    2337 	.db #0x49	; 73	'I'
      000B59 49                    2338 	.db #0x49	; 73	'I'
      000B5A 36                    2339 	.db #0x36	; 54	'6'
      000B5B 3E                    2340 	.db #0x3E	; 62
      000B5C 41                    2341 	.db #0x41	; 65	'A'
      000B5D 41                    2342 	.db #0x41	; 65	'A'
      000B5E 41                    2343 	.db #0x41	; 65	'A'
      000B5F 22                    2344 	.db #0x22	; 34
      000B60 7F                    2345 	.db #0x7F	; 127
      000B61 41                    2346 	.db #0x41	; 65	'A'
      000B62 41                    2347 	.db #0x41	; 65	'A'
      000B63 22                    2348 	.db #0x22	; 34
      000B64 1C                    2349 	.db #0x1C	; 28
      000B65 7F                    2350 	.db #0x7F	; 127
      000B66 49                    2351 	.db #0x49	; 73	'I'
      000B67 49                    2352 	.db #0x49	; 73	'I'
      000B68 49                    2353 	.db #0x49	; 73	'I'
      000B69 49                    2354 	.db #0x49	; 73	'I'
      000B6A 7F                    2355 	.db #0x7F	; 127
      000B6B 09                    2356 	.db #0x09	; 9
      000B6C 09                    2357 	.db #0x09	; 9
      000B6D 09                    2358 	.db #0x09	; 9
      000B6E 09                    2359 	.db #0x09	; 9
      000B6F 3E                    2360 	.db #0x3E	; 62
      000B70 41                    2361 	.db #0x41	; 65	'A'
      000B71 49                    2362 	.db #0x49	; 73	'I'
      000B72 49                    2363 	.db #0x49	; 73	'I'
      000B73 3A                    2364 	.db #0x3A	; 58
      000B74 7F                    2365 	.db #0x7F	; 127
      000B75 08                    2366 	.db #0x08	; 8
      000B76 08                    2367 	.db #0x08	; 8
      000B77 08                    2368 	.db #0x08	; 8
      000B78 7F                    2369 	.db #0x7F	; 127
      000B79 00                    2370 	.db #0x00	; 0
      000B7A 41                    2371 	.db #0x41	; 65	'A'
      000B7B 7F                    2372 	.db #0x7F	; 127
      000B7C 41                    2373 	.db #0x41	; 65	'A'
      000B7D 00                    2374 	.db #0x00	; 0
      000B7E 20                    2375 	.db #0x20	; 32
      000B7F 40                    2376 	.db #0x40	; 64
      000B80 41                    2377 	.db #0x41	; 65	'A'
      000B81 3F                    2378 	.db #0x3F	; 63
      000B82 01                    2379 	.db #0x01	; 1
      000B83 7F                    2380 	.db #0x7F	; 127
      000B84 08                    2381 	.db #0x08	; 8
      000B85 14                    2382 	.db #0x14	; 20
      000B86 22                    2383 	.db #0x22	; 34
      000B87 41                    2384 	.db #0x41	; 65	'A'
      000B88 7F                    2385 	.db #0x7F	; 127
      000B89 40                    2386 	.db #0x40	; 64
      000B8A 40                    2387 	.db #0x40	; 64
      000B8B 40                    2388 	.db #0x40	; 64
      000B8C 40                    2389 	.db #0x40	; 64
      000B8D 7F                    2390 	.db #0x7F	; 127
      000B8E 02                    2391 	.db #0x02	; 2
      000B8F 0C                    2392 	.db #0x0C	; 12
      000B90 02                    2393 	.db #0x02	; 2
      000B91 7F                    2394 	.db #0x7F	; 127
      000B92 7F                    2395 	.db #0x7F	; 127
      000B93 04                    2396 	.db #0x04	; 4
      000B94 08                    2397 	.db #0x08	; 8
      000B95 10                    2398 	.db #0x10	; 16
      000B96 7F                    2399 	.db #0x7F	; 127
      000B97 3E                    2400 	.db #0x3E	; 62
      000B98 41                    2401 	.db #0x41	; 65	'A'
      000B99 41                    2402 	.db #0x41	; 65	'A'
      000B9A 41                    2403 	.db #0x41	; 65	'A'
      000B9B 3E                    2404 	.db #0x3E	; 62
      000B9C 7F                    2405 	.db #0x7F	; 127
      000B9D 09                    2406 	.db #0x09	; 9
      000B9E 09                    2407 	.db #0x09	; 9
      000B9F 09                    2408 	.db #0x09	; 9
      000BA0 06                    2409 	.db #0x06	; 6
      000BA1 3E                    2410 	.db #0x3E	; 62
      000BA2 41                    2411 	.db #0x41	; 65	'A'
      000BA3 51                    2412 	.db #0x51	; 81	'Q'
      000BA4 21                    2413 	.db #0x21	; 33
      000BA5 5E                    2414 	.db #0x5E	; 94
      000BA6 7F                    2415 	.db #0x7F	; 127
      000BA7 09                    2416 	.db #0x09	; 9
      000BA8 19                    2417 	.db #0x19	; 25
      000BA9 29                    2418 	.db #0x29	; 41
      000BAA 46                    2419 	.db #0x46	; 70	'F'
      000BAB 26                    2420 	.db #0x26	; 38
      000BAC 49                    2421 	.db #0x49	; 73	'I'
      000BAD 49                    2422 	.db #0x49	; 73	'I'
      000BAE 49                    2423 	.db #0x49	; 73	'I'
      000BAF 32                    2424 	.db #0x32	; 50	'2'
      000BB0 01                    2425 	.db #0x01	; 1
      000BB1 01                    2426 	.db #0x01	; 1
      000BB2 7F                    2427 	.db #0x7F	; 127
      000BB3 01                    2428 	.db #0x01	; 1
      000BB4 01                    2429 	.db #0x01	; 1
      000BB5 3F                    2430 	.db #0x3F	; 63
      000BB6 40                    2431 	.db #0x40	; 64
      000BB7 40                    2432 	.db #0x40	; 64
      000BB8 40                    2433 	.db #0x40	; 64
      000BB9 3F                    2434 	.db #0x3F	; 63
      000BBA 1F                    2435 	.db #0x1F	; 31
      000BBB 20                    2436 	.db #0x20	; 32
      000BBC 40                    2437 	.db #0x40	; 64
      000BBD 20                    2438 	.db #0x20	; 32
      000BBE 1F                    2439 	.db #0x1F	; 31
      000BBF 3F                    2440 	.db #0x3F	; 63
      000BC0 40                    2441 	.db #0x40	; 64
      000BC1 38                    2442 	.db #0x38	; 56	'8'
      000BC2 40                    2443 	.db #0x40	; 64
      000BC3 3F                    2444 	.db #0x3F	; 63
      000BC4 63                    2445 	.db #0x63	; 99	'c'
      000BC5 14                    2446 	.db #0x14	; 20
      000BC6 08                    2447 	.db #0x08	; 8
      000BC7 14                    2448 	.db #0x14	; 20
      000BC8 63                    2449 	.db #0x63	; 99	'c'
      000BC9 07                    2450 	.db #0x07	; 7
      000BCA 08                    2451 	.db #0x08	; 8
      000BCB 70                    2452 	.db #0x70	; 112	'p'
      000BCC 08                    2453 	.db #0x08	; 8
      000BCD 07                    2454 	.db #0x07	; 7
      000BCE 61                    2455 	.db #0x61	; 97	'a'
      000BCF 51                    2456 	.db #0x51	; 81	'Q'
      000BD0 49                    2457 	.db #0x49	; 73	'I'
      000BD1 45                    2458 	.db #0x45	; 69	'E'
      000BD2 43                    2459 	.db #0x43	; 67	'C'
      000BD3 00                    2460 	.db #0x00	; 0
      000BD4 7F                    2461 	.db #0x7F	; 127
      000BD5 41                    2462 	.db #0x41	; 65	'A'
      000BD6 41                    2463 	.db #0x41	; 65	'A'
      000BD7 00                    2464 	.db #0x00	; 0
      000BD8 02                    2465 	.db #0x02	; 2
      000BD9 04                    2466 	.db #0x04	; 4
      000BDA 08                    2467 	.db #0x08	; 8
      000BDB 10                    2468 	.db #0x10	; 16
      000BDC 20                    2469 	.db #0x20	; 32
      000BDD 00                    2470 	.db #0x00	; 0
      000BDE 41                    2471 	.db #0x41	; 65	'A'
      000BDF 41                    2472 	.db #0x41	; 65	'A'
      000BE0 7F                    2473 	.db #0x7F	; 127
      000BE1 00                    2474 	.db #0x00	; 0
      000BE2 04                    2475 	.db #0x04	; 4
      000BE3 02                    2476 	.db #0x02	; 2
      000BE4 01                    2477 	.db #0x01	; 1
      000BE5 02                    2478 	.db #0x02	; 2
      000BE6 04                    2479 	.db #0x04	; 4
      000BE7 40                    2480 	.db #0x40	; 64
      000BE8 40                    2481 	.db #0x40	; 64
      000BE9 40                    2482 	.db #0x40	; 64
      000BEA 40                    2483 	.db #0x40	; 64
      000BEB 40                    2484 	.db #0x40	; 64
      000BEC 00                    2485 	.db #0x00	; 0
      000BED 01                    2486 	.db #0x01	; 1
      000BEE 02                    2487 	.db #0x02	; 2
      000BEF 04                    2488 	.db #0x04	; 4
      000BF0 00                    2489 	.db #0x00	; 0
      000BF1 20                    2490 	.db #0x20	; 32
      000BF2 54                    2491 	.db #0x54	; 84	'T'
      000BF3 54                    2492 	.db #0x54	; 84	'T'
      000BF4 54                    2493 	.db #0x54	; 84	'T'
      000BF5 78                    2494 	.db #0x78	; 120	'x'
      000BF6 7F                    2495 	.db #0x7F	; 127
      000BF7 50                    2496 	.db #0x50	; 80	'P'
      000BF8 48                    2497 	.db #0x48	; 72	'H'
      000BF9 48                    2498 	.db #0x48	; 72	'H'
      000BFA 30                    2499 	.db #0x30	; 48	'0'
      000BFB 38                    2500 	.db #0x38	; 56	'8'
      000BFC 44                    2501 	.db #0x44	; 68	'D'
      000BFD 44                    2502 	.db #0x44	; 68	'D'
      000BFE 44                    2503 	.db #0x44	; 68	'D'
      000BFF 28                    2504 	.db #0x28	; 40
      000C00 30                    2505 	.db #0x30	; 48	'0'
      000C01 48                    2506 	.db #0x48	; 72	'H'
      000C02 48                    2507 	.db #0x48	; 72	'H'
      000C03 50                    2508 	.db #0x50	; 80	'P'
      000C04 7F                    2509 	.db #0x7F	; 127
      000C05 38                    2510 	.db #0x38	; 56	'8'
      000C06 54                    2511 	.db #0x54	; 84	'T'
      000C07 54                    2512 	.db #0x54	; 84	'T'
      000C08 54                    2513 	.db #0x54	; 84	'T'
      000C09 18                    2514 	.db #0x18	; 24
      000C0A 08                    2515 	.db #0x08	; 8
      000C0B 7E                    2516 	.db #0x7E	; 126
      000C0C 09                    2517 	.db #0x09	; 9
      000C0D 09                    2518 	.db #0x09	; 9
      000C0E 02                    2519 	.db #0x02	; 2
      000C0F 08                    2520 	.db #0x08	; 8
      000C10 54                    2521 	.db #0x54	; 84	'T'
      000C11 54                    2522 	.db #0x54	; 84	'T'
      000C12 54                    2523 	.db #0x54	; 84	'T'
      000C13 3C                    2524 	.db #0x3C	; 60
      000C14 7F                    2525 	.db #0x7F	; 127
      000C15 10                    2526 	.db #0x10	; 16
      000C16 08                    2527 	.db #0x08	; 8
      000C17 08                    2528 	.db #0x08	; 8
      000C18 70                    2529 	.db #0x70	; 112	'p'
      000C19 00                    2530 	.db #0x00	; 0
      000C1A 48                    2531 	.db #0x48	; 72	'H'
      000C1B 7A                    2532 	.db #0x7A	; 122	'z'
      000C1C 40                    2533 	.db #0x40	; 64
      000C1D 00                    2534 	.db #0x00	; 0
      000C1E 20                    2535 	.db #0x20	; 32
      000C1F 40                    2536 	.db #0x40	; 64
      000C20 48                    2537 	.db #0x48	; 72	'H'
      000C21 3A                    2538 	.db #0x3A	; 58
      000C22 00                    2539 	.db #0x00	; 0
      000C23 7F                    2540 	.db #0x7F	; 127
      000C24 10                    2541 	.db #0x10	; 16
      000C25 28                    2542 	.db #0x28	; 40
      000C26 44                    2543 	.db #0x44	; 68	'D'
      000C27 00                    2544 	.db #0x00	; 0
      000C28 00                    2545 	.db #0x00	; 0
      000C29 41                    2546 	.db #0x41	; 65	'A'
      000C2A 7F                    2547 	.db #0x7F	; 127
      000C2B 40                    2548 	.db #0x40	; 64
      000C2C 00                    2549 	.db #0x00	; 0
      000C2D 7C                    2550 	.db #0x7C	; 124
      000C2E 04                    2551 	.db #0x04	; 4
      000C2F 7C                    2552 	.db #0x7C	; 124
      000C30 04                    2553 	.db #0x04	; 4
      000C31 78                    2554 	.db #0x78	; 120	'x'
      000C32 7C                    2555 	.db #0x7C	; 124
      000C33 08                    2556 	.db #0x08	; 8
      000C34 04                    2557 	.db #0x04	; 4
      000C35 04                    2558 	.db #0x04	; 4
      000C36 78                    2559 	.db #0x78	; 120	'x'
      000C37 38                    2560 	.db #0x38	; 56	'8'
      000C38 44                    2561 	.db #0x44	; 68	'D'
      000C39 44                    2562 	.db #0x44	; 68	'D'
      000C3A 44                    2563 	.db #0x44	; 68	'D'
      000C3B 38                    2564 	.db #0x38	; 56	'8'
      000C3C 7C                    2565 	.db #0x7C	; 124
      000C3D 14                    2566 	.db #0x14	; 20
      000C3E 14                    2567 	.db #0x14	; 20
      000C3F 14                    2568 	.db #0x14	; 20
      000C40 08                    2569 	.db #0x08	; 8
      000C41 08                    2570 	.db #0x08	; 8
      000C42 14                    2571 	.db #0x14	; 20
      000C43 14                    2572 	.db #0x14	; 20
      000C44 18                    2573 	.db #0x18	; 24
      000C45 7C                    2574 	.db #0x7C	; 124
      000C46 7C                    2575 	.db #0x7C	; 124
      000C47 08                    2576 	.db #0x08	; 8
      000C48 04                    2577 	.db #0x04	; 4
      000C49 04                    2578 	.db #0x04	; 4
      000C4A 08                    2579 	.db #0x08	; 8
      000C4B 48                    2580 	.db #0x48	; 72	'H'
      000C4C 54                    2581 	.db #0x54	; 84	'T'
      000C4D 54                    2582 	.db #0x54	; 84	'T'
      000C4E 54                    2583 	.db #0x54	; 84	'T'
      000C4F 20                    2584 	.db #0x20	; 32
      000C50 04                    2585 	.db #0x04	; 4
      000C51 3F                    2586 	.db #0x3F	; 63
      000C52 44                    2587 	.db #0x44	; 68	'D'
      000C53 44                    2588 	.db #0x44	; 68	'D'
      000C54 20                    2589 	.db #0x20	; 32
      000C55 3C                    2590 	.db #0x3C	; 60
      000C56 40                    2591 	.db #0x40	; 64
      000C57 40                    2592 	.db #0x40	; 64
      000C58 20                    2593 	.db #0x20	; 32
      000C59 7C                    2594 	.db #0x7C	; 124
      000C5A 1C                    2595 	.db #0x1C	; 28
      000C5B 20                    2596 	.db #0x20	; 32
      000C5C 40                    2597 	.db #0x40	; 64
      000C5D 20                    2598 	.db #0x20	; 32
      000C5E 1C                    2599 	.db #0x1C	; 28
      000C5F 3C                    2600 	.db #0x3C	; 60
      000C60 40                    2601 	.db #0x40	; 64
      000C61 38                    2602 	.db #0x38	; 56	'8'
      000C62 40                    2603 	.db #0x40	; 64
      000C63 3C                    2604 	.db #0x3C	; 60
      000C64 44                    2605 	.db #0x44	; 68	'D'
      000C65 28                    2606 	.db #0x28	; 40
      000C66 10                    2607 	.db #0x10	; 16
      000C67 28                    2608 	.db #0x28	; 40
      000C68 44                    2609 	.db #0x44	; 68	'D'
      000C69 0C                    2610 	.db #0x0C	; 12
      000C6A 50                    2611 	.db #0x50	; 80	'P'
      000C6B 50                    2612 	.db #0x50	; 80	'P'
      000C6C 50                    2613 	.db #0x50	; 80	'P'
      000C6D 3C                    2614 	.db #0x3C	; 60
      000C6E 44                    2615 	.db #0x44	; 68	'D'
      000C6F 64                    2616 	.db #0x64	; 100	'd'
      000C70 54                    2617 	.db #0x54	; 84	'T'
      000C71 4C                    2618 	.db #0x4C	; 76	'L'
      000C72 44                    2619 	.db #0x44	; 68	'D'
      000C73 00                    2620 	.db #0x00	; 0
      000C74 08                    2621 	.db #0x08	; 8
      000C75 36                    2622 	.db #0x36	; 54	'6'
      000C76 41                    2623 	.db #0x41	; 65	'A'
      000C77 00                    2624 	.db #0x00	; 0
      000C78 00                    2625 	.db #0x00	; 0
      000C79 00                    2626 	.db #0x00	; 0
      000C7A 7F                    2627 	.db #0x7F	; 127
      000C7B 00                    2628 	.db #0x00	; 0
      000C7C 00                    2629 	.db #0x00	; 0
      000C7D 00                    2630 	.db #0x00	; 0
      000C7E 41                    2631 	.db #0x41	; 65	'A'
      000C7F 36                    2632 	.db #0x36	; 54	'6'
      000C80 08                    2633 	.db #0x08	; 8
      000C81 00                    2634 	.db #0x00	; 0
      000C82 10                    2635 	.db #0x10	; 16
      000C83 08                    2636 	.db #0x08	; 8
      000C84 08                    2637 	.db #0x08	; 8
      000C85 10                    2638 	.db #0x10	; 16
      000C86 08                    2639 	.db #0x08	; 8
      000C87 06                    2640 	.db #0x06	; 6
      000C88 09                    2641 	.db #0x09	; 9
      000C89 09                    2642 	.db #0x09	; 9
      000C8A 06                    2643 	.db #0x06	; 6
      000C8B 00                    2644 	.db #0x00	; 0
      000C8C 00                    2645 	.db #0x00	; 0
      000C8D 00                    2646 	.db #0x00	; 0
      000C8E 00                    2647 	.db #0x00	; 0
      000C8F F8                    2648 	.db #0xF8	; 248
      000C90 F8                    2649 	.db #0xF8	; 248
      000C91 18                    2650 	.db #0x18	; 24
      000C92 18                    2651 	.db #0x18	; 24
      000C93 18                    2652 	.db #0x18	; 24
      000C94 18                    2653 	.db #0x18	; 24
      000C95 18                    2654 	.db #0x18	; 24
      000C96 18                    2655 	.db #0x18	; 24
      000C97 F8                    2656 	.db #0xF8	; 248
      000C98 F8                    2657 	.db #0xF8	; 248
      000C99 18                    2658 	.db #0x18	; 24
      000C9A 18                    2659 	.db #0x18	; 24
      000C9B 18                    2660 	.db #0x18	; 24
      000C9C 18                    2661 	.db #0x18	; 24
      000C9D 18                    2662 	.db #0x18	; 24
      000C9E 18                    2663 	.db #0x18	; 24
      000C9F F8                    2664 	.db #0xF8	; 248
      000CA0 F8                    2665 	.db #0xF8	; 248
      000CA1 00                    2666 	.db #0x00	; 0
      000CA2 00                    2667 	.db #0x00	; 0
      000CA3 00                    2668 	.db #0x00	; 0
      000CA4 00                    2669 	.db #0x00	; 0
      000CA5 00                    2670 	.db #0x00	; 0
      000CA6 00                    2671 	.db #0x00	; 0
      000CA7 FF                    2672 	.db #0xFF	; 255
      000CA8 FF                    2673 	.db #0xFF	; 255
      000CA9 18                    2674 	.db #0x18	; 24
      000CAA 18                    2675 	.db #0x18	; 24
      000CAB 18                    2676 	.db #0x18	; 24
      000CAC 18                    2677 	.db #0x18	; 24
      000CAD 18                    2678 	.db #0x18	; 24
      000CAE 18                    2679 	.db #0x18	; 24
      000CAF FF                    2680 	.db #0xFF	; 255
      000CB0 FF                    2681 	.db #0xFF	; 255
      000CB1 18                    2682 	.db #0x18	; 24
      000CB2 18                    2683 	.db #0x18	; 24
      000CB3 18                    2684 	.db #0x18	; 24
      000CB4 18                    2685 	.db #0x18	; 24
      000CB5 18                    2686 	.db #0x18	; 24
      000CB6 18                    2687 	.db #0x18	; 24
      000CB7 FF                    2688 	.db #0xFF	; 255
      000CB8 FF                    2689 	.db #0xFF	; 255
      000CB9 00                    2690 	.db #0x00	; 0
      000CBA 00                    2691 	.db #0x00	; 0
      000CBB 00                    2692 	.db #0x00	; 0
      000CBC 00                    2693 	.db #0x00	; 0
      000CBD 00                    2694 	.db #0x00	; 0
      000CBE 00                    2695 	.db #0x00	; 0
      000CBF 1F                    2696 	.db #0x1F	; 31
      000CC0 1F                    2697 	.db #0x1F	; 31
      000CC1 18                    2698 	.db #0x18	; 24
      000CC2 18                    2699 	.db #0x18	; 24
      000CC3 18                    2700 	.db #0x18	; 24
      000CC4 18                    2701 	.db #0x18	; 24
      000CC5 18                    2702 	.db #0x18	; 24
      000CC6 18                    2703 	.db #0x18	; 24
      000CC7 1F                    2704 	.db #0x1F	; 31
      000CC8 1F                    2705 	.db #0x1F	; 31
      000CC9 18                    2706 	.db #0x18	; 24
      000CCA 18                    2707 	.db #0x18	; 24
      000CCB 18                    2708 	.db #0x18	; 24
      000CCC 18                    2709 	.db #0x18	; 24
      000CCD 18                    2710 	.db #0x18	; 24
      000CCE 18                    2711 	.db #0x18	; 24
      000CCF 1F                    2712 	.db #0x1F	; 31
      000CD0 1F                    2713 	.db #0x1F	; 31
      000CD1 00                    2714 	.db #0x00	; 0
      000CD2 00                    2715 	.db #0x00	; 0
      000CD3 00                    2716 	.db #0x00	; 0
      000CD4 18                    2717 	.db #0x18	; 24
      000CD5 18                    2718 	.db #0x18	; 24
      000CD6 18                    2719 	.db #0x18	; 24
      000CD7 18                    2720 	.db #0x18	; 24
      000CD8 18                    2721 	.db #0x18	; 24
      000CD9 18                    2722 	.db #0x18	; 24
      000CDA 18                    2723 	.db #0x18	; 24
      000CDB 18                    2724 	.db #0x18	; 24
      000CDC 00                    2725 	.db #0x00	; 0
      000CDD 00                    2726 	.db #0x00	; 0
      000CDE 00                    2727 	.db #0x00	; 0
      000CDF FF                    2728 	.db #0xFF	; 255
      000CE0 FF                    2729 	.db #0xFF	; 255
      000CE1 00                    2730 	.db #0x00	; 0
      000CE2 00                    2731 	.db #0x00	; 0
      000CE3 00                    2732 	.db #0x00	; 0
      000CE4 18                    2733 	.db #0x18	; 24
      000CE5 0C                    2734 	.db #0x0C	; 12
      000CE6 06                    2735 	.db #0x06	; 6
      000CE7 FF                    2736 	.db #0xFF	; 255
      000CE8 FF                    2737 	.db #0xFF	; 255
      000CE9 06                    2738 	.db #0x06	; 6
      000CEA 0C                    2739 	.db #0x0C	; 12
      000CEB 18                    2740 	.db #0x18	; 24
      000CEC 18                    2741 	.db #0x18	; 24
      000CED 30                    2742 	.db #0x30	; 48	'0'
      000CEE 60                    2743 	.db #0x60	; 96
      000CEF FF                    2744 	.db #0xFF	; 255
      000CF0 FF                    2745 	.db #0xFF	; 255
      000CF1 60                    2746 	.db #0x60	; 96
      000CF2 30                    2747 	.db #0x30	; 48	'0'
      000CF3 18                    2748 	.db #0x18	; 24
      000CF4 18                    2749 	.db #0x18	; 24
      000CF5 3C                    2750 	.db #0x3C	; 60
      000CF6 7E                    2751 	.db #0x7E	; 126
      000CF7 DB                    2752 	.db #0xDB	; 219
      000CF8 99                    2753 	.db #0x99	; 153
      000CF9 18                    2754 	.db #0x18	; 24
      000CFA 18                    2755 	.db #0x18	; 24
      000CFB 18                    2756 	.db #0x18	; 24
      000CFC 18                    2757 	.db #0x18	; 24
      000CFD 18                    2758 	.db #0x18	; 24
      000CFE 18                    2759 	.db #0x18	; 24
      000CFF 99                    2760 	.db #0x99	; 153
      000D00 DB                    2761 	.db #0xDB	; 219
      000D01 7E                    2762 	.db #0x7E	; 126
      000D02 3C                    2763 	.db #0x3C	; 60
      000D03 18                    2764 	.db #0x18	; 24
      000D04 7F                    2765 	.db #0x7F	; 127
      000D05 7F                    2766 	.db #0x7F	; 127
      000D06 0F                    2767 	.db #0x0F	; 15
      000D07 1F                    2768 	.db #0x1F	; 31
      000D08 3B                    2769 	.db #0x3B	; 59
      000D09 73                    2770 	.db #0x73	; 115	's'
      000D0A E3                    2771 	.db #0xE3	; 227
      000D0B 40                    2772 	.db #0x40	; 64
      000D0C 40                    2773 	.db #0x40	; 64
      000D0D E3                    2774 	.db #0xE3	; 227
      000D0E 73                    2775 	.db #0x73	; 115	's'
      000D0F 3B                    2776 	.db #0x3B	; 59
      000D10 1F                    2777 	.db #0x1F	; 31
      000D11 0F                    2778 	.db #0x0F	; 15
      000D12 7F                    2779 	.db #0x7F	; 127
      000D13 7F                    2780 	.db #0x7F	; 127
      000D14 FE                    2781 	.db #0xFE	; 254
      000D15 FE                    2782 	.db #0xFE	; 254
      000D16 F0                    2783 	.db #0xF0	; 240
      000D17 F8                    2784 	.db #0xF8	; 248
      000D18 DC                    2785 	.db #0xDC	; 220
      000D19 CE                    2786 	.db #0xCE	; 206
      000D1A C7                    2787 	.db #0xC7	; 199
      000D1B 02                    2788 	.db #0x02	; 2
      000D1C 02                    2789 	.db #0x02	; 2
      000D1D C7                    2790 	.db #0xC7	; 199
      000D1E CE                    2791 	.db #0xCE	; 206
      000D1F DC                    2792 	.db #0xDC	; 220
      000D20 F8                    2793 	.db #0xF8	; 248
      000D21 F0                    2794 	.db #0xF0	; 240
      000D22 FE                    2795 	.db #0xFE	; 254
      000D23 FE                    2796 	.db #0xFE	; 254
      000D24 3C                    2797 	.db #0x3C	; 60
      000D25 42                    2798 	.db #0x42	; 66	'B'
      000D26 81                    2799 	.db #0x81	; 129
      000D27 99                    2800 	.db #0x99	; 153
      000D28 99                    2801 	.db #0x99	; 153
      000D29 81                    2802 	.db #0x81	; 129
      000D2A 42                    2803 	.db #0x42	; 66	'B'
      000D2B 3C                    2804 	.db #0x3C	; 60
      000D2C                       2805 ___str_0:
      000D2C 20 4F 4C 45 44 20 54  2806 	.ascii " OLED TEST : INT"
             45 53 54 20 3A 20 49
             4E 54
      000D3C 00                    2807 	.db 0x00
      000D3D                       2808 ___str_1:
      000D3D 41 42 43 44 45 46 47  2809 	.ascii "ABCDEFGHIJKLM"
             48 49 4A 4B 4C 4D
      000D4A 00                    2810 	.db 0x00
      000D4B                       2811 ___str_2:
      000D4B 4E 4F 50 51 52 53 54  2812 	.ascii "NOPQRSTUVWXYZ"
             55 56 57 58 59 5A
      000D58 00                    2813 	.db 0x00
      000D59                       2814 ___str_3:
      000D59 61 62 63 64 65 66 67  2815 	.ascii "abcdefghijklm"
             68 69 6A 6B 6C 6D
      000D66 00                    2816 	.db 0x00
      000D67                       2817 ___str_4:
      000D67 6E 6F 70 71 72 73 74  2818 	.ascii "nopqrstuvwxyz"
             75 76 77 78 79 7A
      000D74 00                    2819 	.db 0x00
      000D75                       2820 ___str_5:
      000D75 30 31 32 33 34 35 36  2821 	.ascii "0123456789"
             37 38 39
      000D7F 00                    2822 	.db 0x00
      000D80                       2823 ___str_6:
      000D80 4F 4C 45 44 20 54 45  2824 	.ascii "OLED TEST : CHAR"
             53 54 20 3A 20 43 48
             41 52
      000D90 00                    2825 	.db 0x00
      000D91                       2826 ___str_7:
      000D91 3C 7B 28 5B 2B 5F 2D  2827 	.ascii "<{([+_-=])}>"
             3D 5D 29 7D 3E
      000D9D 00                    2828 	.db 0x00
      000D9E                       2829 ___str_8:
      000D9E 21 40 23 24 25 5E 26  2830 	.ascii "!@#$%^&*`|~?"
             2A 60 7C 7E 3F
      000DAA 00                    2831 	.db 0x00
      000DAB                       2832 ___str_9:
      000DAB 2E 2C                 2833 	.ascii ".,"
      000DAD 22                    2834 	.db 0x22
      000DAE 27                    2835 	.ascii "'"
      000DAF 5C                    2836 	.db 0x5C
      000DB0 2F 20 3A 3B           2837 	.ascii "/ :;"
      000DB4 00                    2838 	.db 0x00
      000DB5                       2839 ___str_10:
      000DB5 20 4F 4C 45 44 20 54  2840 	.ascii " OLED TEST : SYM"
             45 53 54 20 3A 20 53
             59 4D
      000DC5 00                    2841 	.db 0x00
      000DC6                       2842 ___str_11:
      000DC6 20 20 44 52 41 57 20  2843 	.ascii "  DRAW PATTERN  "
             50 41 54 54 45 52 4E
             20 20
      000DD6 00                    2844 	.db 0x00
                                   2845 	.area INITIALIZER
      000000                       2846 __xinit__dsine:
      000000 18                    2847 	.db #0x18	; 24
      000001 06                    2848 	.db #0x06	; 6
      000002 01                    2849 	.db #0x01	; 1
      000003 01                    2850 	.db #0x01	; 1
      000004 06                    2851 	.db #0x06	; 6
      000005 18                    2852 	.db #0x18	; 24
      000006 60                    2853 	.db #0x60	; 96
      000007 80                    2854 	.db #0x80	; 128
      000008 80                    2855 	.db #0x80	; 128
      000009 60                    2856 	.db #0x60	; 96
      00000A                       2857 __xinit__dtri:
      00000A 08                    2858 	.db #0x08	; 8
      00000B 04                    2859 	.db #0x04	; 4
      00000C 02                    2860 	.db #0x02	; 2
      00000D 01                    2861 	.db #0x01	; 1
      00000E 02                    2862 	.db #0x02	; 2
      00000F 04                    2863 	.db #0x04	; 4
      000010 08                    2864 	.db #0x08	; 8
      000011 10                    2865 	.db #0x10	; 16
      000012 20                    2866 	.db #0x20	; 32
      000013 40                    2867 	.db #0x40	; 64
      000014 80                    2868 	.db #0x80	; 128
      000015 40                    2869 	.db #0x40	; 64
      000016 20                    2870 	.db #0x20	; 32
      000017 10                    2871 	.db #0x10	; 16
                                   2872 	.area CABS (ABS)
